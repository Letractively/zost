unit UConfigurations;

interface

uses
  Classes, SysUtils, IniFiles, Forms, Windows;

const
  cPARAMETROSSection = 'PARAMETROS';

  {Section: PARAMETROS}
  cPARAMETROSORIGEM = 'ORIGEM';
  cPARAMETROSTIPODOCUMENTO = 'TIPODOCUMENTO';
  cPARAMETROSTODOSOSDOCUMENTOS = 'TODOSOSDOCUMENTOS';
  cPARAMETROSOPCAODATA = 'OPCAODATA';
  cPARAMETROSDATAINICIAL = 'DATAINICIAL';
  cPARAMETROSDATAFINAL = 'DATAFINAL';
  cPARAMETROSNUMEROMESES = 'NUMEROMESES';
  cPARAMETROSNOMEDOARQUIVO = 'NOMEDOARQUIVO';
  cPARAMETROSDATABASE = 'DATABASE';
  cPARAMETROSHOSTNAME = 'HOSTNAME';
  cPARAMETROSUSERNAME = 'USERNAME';
  cPARAMETROSPASSWORD = 'PASSWORD';

type
  TConfigurations = class(TObject)
  private
    {Section: PARAMETROS}
    FPARAMETROSORIGEM: Integer;
    FPARAMETROSTIPODOCUMENTO: Integer;
    FPARAMETROSTODOSOSDOCUMENTOS: Boolean;
    FPARAMETROSOPCAODATA: Integer;
    FPARAMETROSDATAINICIAL: TDateTime;
    FPARAMETROSDATAFINAL: TDateTime;
    FPARAMETROSNUMEROMESES: Integer;
    FPARAMETROSNOMEDOARQUIVO: string;
    FPARAMETROSDATABASE: string;
    FPARAMETROSHOSTNAME: string;
    FPARAMETROSUSERNAME: string;
    FPARAMETROSPASSWORD: string;
  public
    procedure LoadSettings(Ini: TIniFile);
    procedure SaveSettings(Ini: TIniFile);
    
    procedure LoadFromFile(const FileName: string);
    procedure SaveToFile(const FileName: string);

    {Section: PARAMETROS}
    property PARAMETROSORIGEM: Integer read FPARAMETROSORIGEM write FPARAMETROSORIGEM;
    property PARAMETROSTIPODOCUMENTO: Integer read FPARAMETROSTIPODOCUMENTO write FPARAMETROSTIPODOCUMENTO;
    property PARAMETROSTODOSOSDOCUMENTOS: Boolean read FPARAMETROSTODOSOSDOCUMENTOS write FPARAMETROSTODOSOSDOCUMENTOS;
    property PARAMETROSOPCAODATA: Integer read FPARAMETROSOPCAODATA write FPARAMETROSOPCAODATA;
    property PARAMETROSDATAINICIAL: TDateTime read FPARAMETROSDATAINICIAL write FPARAMETROSDATAINICIAL;
    property PARAMETROSDATAFINAL: TDateTime read FPARAMETROSDATAFINAL write FPARAMETROSDATAFINAL;
    property PARAMETROSNUMEROMESES: Integer read FPARAMETROSNUMEROMESES write FPARAMETROSNUMEROMESES;
    property PARAMETROSNOMEDOARQUIVO: string read FPARAMETROSNOMEDOARQUIVO write FPARAMETROSNOMEDOARQUIVO;
    property PARAMETROSDATABASE: string read FPARAMETROSDATABASE write FPARAMETROSDATABASE;
    property PARAMETROSHOSTNAME: string read FPARAMETROSHOSTNAME write FPARAMETROSHOSTNAME;
    property PARAMETROSUSERNAME: string read FPARAMETROSUSERNAME write FPARAMETROSUSERNAME;
    property PARAMETROSPASSWORD: string read FPARAMETROSPASSWORD write FPARAMETROSPASSWORD;
  end;

var
  Configurations: TConfigurations = nil;

implementation

procedure TConfigurations.LoadSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    {Section: PARAMETROS}
    FPARAMETROSORIGEM := Ini.ReadInteger(cPARAMETROSSection, cPARAMETROSORIGEM, 1);
    FPARAMETROSTIPODOCUMENTO := Ini.ReadInteger(cPARAMETROSSection, cPARAMETROSTIPODOCUMENTO, 1);

    if UpperCase(Ini.ReadString(cPARAMETROSSection, cPARAMETROSTODOSOSDOCUMENTOS, 'True')) = 'TRUE' then
      FPARAMETROSTODOSOSDOCUMENTOS := True
    else
      FPARAMETROSTODOSOSDOCUMENTOS := False;

    FPARAMETROSOPCAODATA := Ini.ReadInteger(cPARAMETROSSection, cPARAMETROSOPCAODATA, 1);
    FPARAMETROSDATAINICIAL := Ini.ReadDateTime(cPARAMETROSSection, cPARAMETROSDATAINICIAL, StrToDateTime('01/01/2001'));
    FPARAMETROSDATAFINAL := Ini.ReadDateTime(cPARAMETROSSection, cPARAMETROSDATAFINAL, StrToDateTime('01/12/2010'));
    FPARAMETROSNUMEROMESES := Ini.ReadInteger(cPARAMETROSSection, cPARAMETROSNUMEROMESES, 10);
    FPARAMETROSNOMEDOARQUIVO := Ini.ReadString(cPARAMETROSSection, cPARAMETROSNOMEDOARQUIVO, '.\CJF');
    FPARAMETROSDATABASE := Ini.ReadString(cPARAMETROSSection, cPARAMETROSDATABASE, 'TRF5PRD');
    FPARAMETROSHOSTNAME := Ini.ReadString(cPARAMETROSSection, cPARAMETROSHOSTNAME, 'TAMANDARE');
    FPARAMETROSUSERNAME := Ini.ReadString(cPARAMETROSSection, cPARAMETROSUSERNAME, 'ATENAS');
    FPARAMETROSPASSWORD := Ini.ReadString(cPARAMETROSSection, cPARAMETROSPASSWORD, 'ATENAS');
  end;
end;

procedure TConfigurations.SaveSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    {Section: PARAMETROS}
    Ini.WriteInteger(cPARAMETROSSection, cPARAMETROSORIGEM, FPARAMETROSORIGEM);
    Ini.WriteInteger(cPARAMETROSSection, cPARAMETROSTIPODOCUMENTO, FPARAMETROSTIPODOCUMENTO);

    Ini.WriteString(cPARAMETROSSection, cPARAMETROSTODOSOSDOCUMENTOS, BoolToStr(FPARAMETROSTODOSOSDOCUMENTOS,True));

    Ini.WriteInteger(cPARAMETROSSection, cPARAMETROSOPCAODATA, FPARAMETROSOPCAODATA);
    Ini.WriteDateTime(cPARAMETROSSection, cPARAMETROSDATAINICIAL, FPARAMETROSDATAINICIAL);
    Ini.WriteDateTime(cPARAMETROSSection, cPARAMETROSDATAFINAL, FPARAMETROSDATAFINAL);
    Ini.WriteInteger(cPARAMETROSSection, cPARAMETROSNUMEROMESES, FPARAMETROSNUMEROMESES);
    Ini.WriteString(cPARAMETROSSection, cPARAMETROSNOMEDOARQUIVO, FPARAMETROSNOMEDOARQUIVO);
    Ini.WriteString(cPARAMETROSSection, cPARAMETROSDATABASE, FPARAMETROSDATABASE);
    Ini.WriteString(cPARAMETROSSection, cPARAMETROSHOSTNAME, FPARAMETROSHOSTNAME);
    Ini.WriteString(cPARAMETROSSection, cPARAMETROSUSERNAME, FPARAMETROSUSERNAME);
    Ini.WriteString(cPARAMETROSSection, cPARAMETROSPASSWORD, FPARAMETROSPASSWORD);
  end;
end;

procedure TConfigurations.LoadFromFile(const FileName: string);
var
  Ini: TIniFile;
begin
  if FileExists(FileName) then
  begin
    Ini := TIniFile.Create(FileName);
    try
      LoadSettings(Ini);
    finally
      Ini.Free;
    end;
  end;
end;

procedure TConfigurations.SaveToFile(const FileName: string);
var
  Ini: TIniFile;
begin
  Ini := TIniFile.Create(FileName);
  try
    SaveSettings(Ini);
  finally
    Ini.Free;
  end;
end;

initialization
  Configurations := TConfigurations.Create;

finalization
  Configurations.Free;

end.

