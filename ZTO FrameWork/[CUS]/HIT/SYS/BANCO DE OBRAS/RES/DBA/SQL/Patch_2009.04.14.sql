# CONFIGURE ABAIXO O NOME DO BANCO DE DADOS COLOCANDO-O ENTRE ASPAS NA
# ATRIBUIÇÃO DA VARIÁVEL E SEM ASPAS NO COMANDO "USE"
SET @BANCODEDADOS := 'BANCODEOBRAS3';
USE BANCODEOBRAS3;

# A SEGUIR CONFIGURE O NOME DO BANCO DE DADOS DENTRO DO PROCEDURE A SEGUIR, NO LOCAL INDICADO
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE; # CRIA O USUÁRIO DO FTP SYNCHRONIZER
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

	# PROCURANDO UMA CONTA DE USUÁRIO ACESSÍVEL A PARTIR DE QUALQUER HOST
  SELECT COUNT(*)
    INTO CONDICAO
    FROM MYSQL.USER USR
   WHERE USR.USER = 'WSCBDO'
     AND USR.HOST = '%';

  # REMOVE ESTE USUÁRIO
  IF CONDICAO THEN
  	DROP USER WSCBDO;
  END IF;

	# PROCURANDO UMA CONTA DE USUÁRIO ACESSÍVEL A PARTIR DE LOCALHOST
  SELECT COUNT(*)
    INTO CONDICAO
    FROM MYSQL.USER USR
   WHERE USR.USER = 'WSCBDO'
     AND USR.HOST = 'localhost';

  # REMOVE ESTE USUÁRIO
  IF CONDICAO THEN
  	DROP USER WSCBDO@localhost;
  END IF;

	# PROCURANDO UMA CONTA DE USUÁRIO ACESSÍVEL A PARTIR DE 127.0.0.1
  SELECT COUNT(*)
    INTO CONDICAO
    FROM MYSQL.USER USR
   WHERE USR.USER = 'WSCBDO'
     AND USR.HOST = '127.0.0.1';

  # REMOVE ESTE USUÁRIO
  IF CONDICAO THEN
  	DROP USER WSCBDO@127.0.0.1;
  END IF;

  # REMOVE INCONDICIONALMENTE QUALQUER USUÁRIO QUE NÃO TENHA SENHA DE ACESSO
#  DELETE FROM MYSQL.USER WHERE PASSWORD = '';

  # NESTE PONTO NÃO HÁ MAIS USUÁRIO DO FTP SYNCHRONIZER, É HORA DE RECOLOCÁ-LO DE FORMA CORRETA
  CREATE USER WSCBDO@localhost IDENTIFIED BY 'hitachiwscbdo';

  # DANDO PERMISSÕES SUFICIENTES AO NOSSO USUÁRIO
  GRANT ALL PRIVILEGES
     ON BANCODEOBRAS3.* # <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< MUDE O BANCO DE DADOS AQUI, CASO SEJA NECESSÁRIO
     TO WSCBDO@localhost;

  # VERIFICANDO SE EXISTE A TABELA "USER_INFO"
	SELECT COUNT(*)
    INTO CONDICAO
  	FROM INFORMATION_SCHEMA.TABLES TBL
 	 WHERE UPPER(TBL.TABLE_SCHEMA) = 'MYSQL'
     AND UPPER(TBL.TABLE_NAME) = 'USER_INFO';

  # SE A TABELA NÃO EXISTIR ENTÃO CRIA
  IF NOT CONDICAO THEN
		CREATE TABLE  mysql.user_info (User varchar(16) COLLATE utf8_bin NOT NULL
		                              ,Full_name varchar(60) COLLATE utf8_bin DEFAULT NULL
		                              ,Description varchar(255) COLLATE utf8_bin DEFAULT NULL
		                              ,Email varchar(80) COLLATE utf8_bin DEFAULT NULL
		                              ,Contact_information text COLLATE utf8_bin
		                              ,Icon blob
		                              ,PRIMARY KEY (User)
		                              ,KEY user_info_Full_name (Full_name))
		ENGINE=MyISAM
    DEFAULT CHARSET=utf8
    COLLATE=utf8_bin
    COMMENT='Stores additional user information';
  END IF;

  # REMOVENDO UM POSSÍVEL REGISTRO EXISTENTE NA TABELA, QUE IDENTIFICA O USUÁRIO DO FTP SYNCHRONIZER
	DELETE FROM MYSQL.USER_INFO
 	 WHERE USER = 'WSCBDO';

  # ADICIONANDO O REGISTRO NOVAMENTE COM AS INFORMAÇÕES CORRETAS
  INSERT INTO MYSQL.USER_INFO (USER,FULL_NAME,DESCRIPTION)
       VALUES ('WSCBDO'
              ,'FTP Synchronizer (Client)'
              ,'Usuário para sincronização do FTP Synchronizer (Módulo Cliente)');
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;

# ==============================================================================
# CONSIDERAÇÕES IMPORTANTES...
# OS TRIGGERS "TRG_EDI_AFTER_INSERT" E "TRG_EDI_AFTER_DELETE" ESTAVAM ERRADOS, MONTANDO A STRING DE MESTRES APENAS COM IN_ITENS_ID
# TODOS OS TRIGGERS FORAM REFEITOS PARA USAR COMO MESTRES A SEGUINTE FORMA: <MESTRE1=CHAVE1><MESTRE2=CHAVE2>
# O PROCEDURE "PRC_CLEAR_DELTA_FROM_ORPHANS" CONTINHA ERROS QUE CAUSARIAM ERROS DE SINCRONIZAÇÃO
# O PROCEDURE "PRC_CLEAR_DELTA_FROM_ORPHANS" FOI ALTERADO PARA CONSIDERA A TABELA "JUSTIFICATIVASDASOBRAS".
# A TABELA PERMISSOESDOSGRUPOS SERÁ REPREENCHIDA
# O GRUPO "FUNCIONÁRIOS" SERÁ EXCLUÍDO
# O CAMPO "VA_MOEDA" DA TABELA "PROPOSTAS" MUDARÁ PARA "TI_MOEDA"
# A SENHA DE TODOS OS USUÁRIOS SERÁ RESETADA PARA "1234567890"
# ALGUNS REGISTROS DA TABELA EQUIPAMENTOSDOSITENS SERÃO AJUSTADOS (CORRIGIDOS) DE FORMA QUE SEUS CAMPOS TI_MOEDA SEJAM UNICOS PARA CADA ITEM
# CAMPOS EN_VOLTAGEM INCOERENTES NA TABELA ITENS FORAM RESETADOS PARA "N/A"
# ALGUMAS OBRAS ESTAVAM COM MAIS DE UMA PROPOSTA PADRÃO. ISSO FOI CORRIGIDO ESCOLHENDO-SE A PRIMEIRA PROPOSTA DE CADA OBRA PROBLEMÁTICA COMO PADRÃO
# AS CHAVES DE TODAS AS TABELAS FORAM CONVERTIDAS PARA NÃO SEREM MAIS UNSIGNED. ISSO FOI NECESSÁRIO PARA SERVIR DE SOLUÇÃO A UM PROBLEMA DE SINCRONIZAÇÃO
# A FUNÇÃO "FNC_GET_PROPOSAL_VALUE" FOI ACRESCIDA DE MAIS UM PARÂMETRO QUE INDICA SE DEVEMOS OU NÃO ARREDONDAR O VALOR PARA DUAS CASAS DECIMAIS
# A FUNÇÃO "FNC_GET_WORK_VALUE" FOI ACRESCIDA DE MAIS UM PARÂMETRO QUE INDICA SE DEVEMOS OU NÃO ARREDONDAR O VALOR PARA DUAS CASAS DECIMAIS
# A TABELA DE OBRAS CONTÉM MAIS UM CAMPO PARA INDICAR O USUÁRIO QUE REALIZOU A ÚLTIMA JUSTIFICATIVA
# MAIS DUAS TABELAS FORAM CRIADAS PARA ARMAZENAR AS JUSTIFICATIVAS DAS OBRAS
# O CAMPO IPI FOI ADICIONADO À TABELA "EQUIPAMENTOS"
# ==============================================================================

# == VARIAVEIS TEMPORRIAS ======================================================
# A VARIVEL "SYNCHRONIZING" É ÚTIL APENAS NO CLIENTE POIS LÁ PODE HAVER AÇÕES
# EM TABELAS GERADAS DURANTE UMA SINCRONIZAO OU NÃO. NO SERVIDOR, QUANDO
# "SERVERSIDE" = TRUE, ESTA VARIÁVEL É IGNORADA POIS NO SERVIDOR ESTAREMOS
# SEMPRE SINCRONIZANDO

# O USO DESTAS VARIVEIS AQUI SÓ EFETIVO SE HOUVER MANIPULÇÃO DE DADOS NESTE
# SCRIPT. SE NÃO HOUVER, ENTÃO ESTAS VARIÁVEIS NÃO FAZEM SENTIDO E PODEM SER
# REMOVIDAS, MAS É RECOMENDADO MANTÊ-LAS E AJUSTÁ-LAS SEMPRE. SERVERSIDE = TRUE
# É CONDIÇÃO SUFICIENTE PARA DIZER QUE SE ESTÁ SINCRONIZANDO NO SERVIDOR POIS O
# SERVIDOR NO É ACESSÍVEL DIRETAMENTE, APENAS VIA SINCRONIZÇÃO
SET @SYNCHRONIZING = FALSE;
SET @CURRENTLOGGEDUSER = 1;
SET @SERVERSIDE = TRUE;
SET @ADJUSTINGDB = TRUE;
SET FOREIGN_KEY_CHECKS = 0;
# ATENÇÃO: QUANDO FOREIGN_KEY_CHECKS ESTÁ DESATIVADO NENHUMA FUNÇÃO RELACIONADA
# A INTEGRIDADE REFERENCIAL SERÁ EXECUTADA A SABER: ONDELETE E ONUPDATE. SE SUA
# INTENÇÃO É EXCLUIR PROPOSITALMENTE ALGUNS REGISTROS A TITULO DE LIMPEZA, ISSO
# DEVE SER FEITO QUANDO "FOREIGN_KEY_CHECKS = 1" DO CONTRÁRIO O BANCO FICARÁ
# INCONSISTENTE (REGISTROS ÓRFÃOS)
# ==============================================================================

# == STORED PROCEDURES =========================================================

DROP FUNCTION IF EXISTS FNC_GET_CURRENCY_CODE_FROM_WORK;
DELIMITER ¬
CREATE FUNCTION FNC_GET_CURRENCY_CODE_FROM_WORK(WORKID INTEGER UNSIGNED)
RETURNS TINYINT UNSIGNED
SQL SECURITY DEFINER
BEGIN
  DECLARE CURRENCYCODE TINYINT UNSIGNED DEFAULT NULL;

  SELECT TI_MOEDA
    INTO CURRENCYCODE
    FROM PROPOSTAS
   WHERE BO_PROPOSTAPADRAO
     AND IN_OBRAS_ID = WORKID;

  RETURN CURRENCYCODE;
END ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_COPY_ITEMS_FROM_PROPOSAL;
DELIMITER ¬
CREATE PROCEDURE PRC_COPY_ITEMS_FROM_PROPOSAL(IDPROPOSALSOURCE INTEGER UNSIGNED
                                             ,IDPROPOSALDESTINATION INTEGER UNSIGNED)
SQL SECURITY DEFINER
BEGIN

  DECLARE NOMOREITEMS BOOLEAN DEFAULT FALSE;
  DECLARE ITEM INTEGER UNSIGNED DEFAULT 0;
  DECLARE ULTIMOITEMINSERIDO INTEGER UNSIGNED DEFAULT 0;

  DECLARE ITENS CURSOR FOR SELECT IN_ITENS_ID
                             FROM ITENS
                            WHERE IN_PROPOSTAS_ID = IDPROPOSALSOURCE
                         ORDER BY TI_ORDEM;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET NOMOREITEMS := TRUE;

  IF NOT @SERVERSIDE THEN

    OPEN ITENS;
  
    REPEAT
      FETCH ITENS INTO ITEM;
  
      IF NOT NOMOREITEMS THEN
        # INSERE O ITEM NA PROPOSTA DE DESTINO
        INSERT INTO ITENS (IN_PROPOSTAS_ID
                          ,TI_FAMILIAS_ID
                          ,VA_DESCRICAO
                          ,FL_CAPACIDADE
                          ,TI_UNIDADES_ID
                          ,SM_QUANTIDADE
                          ,FL_DESCONTOPERC
                          ,EN_VOLTAGEM
                          ,TI_ORDEM)
        SELECT IDPROPOSALDESTINATION
             , TI_FAMILIAS_ID
             , VA_DESCRICAO
             , FL_CAPACIDADE
             , TI_UNIDADES_ID
             , SM_QUANTIDADE
             , FL_DESCONTOPERC
             , EN_VOLTAGEM
             , TI_ORDEM
          FROM ITENS
         WHERE IN_ITENS_ID = ITEM;

        # OBTÉM O ULTIMO ITEM INSERIDO
        SET ULTIMOITEMINSERIDO := LAST_INSERT_ID();

        # SE HÁ ALGUM ITEM RECÉM INSERIDO, ESTE DEVE TER SEUS EQUIPAMENTOS COPIADOS TAMBÉM
        IF ULTIMOITEMINSERIDO > 0 THEN
          INSERT INTO EQUIPAMENTOSDOSITENS (IN_ITENS_ID
                                           ,IN_EQUIPAMENTOS_ID
                                           ,FL_LUCROBRUTO
                                           ,FL_VALORUNITARIO
                                           ,TI_MOEDA)
          SELECT ULTIMOITEMINSERIDO
               , IN_EQUIPAMENTOS_ID
               , FL_LUCROBRUTO
               , FL_VALORUNITARIO
               , TI_MOEDA
            FROM EQUIPAMENTOSDOSITENS
           WHERE IN_ITENS_ID = ITEM;
        END IF;
      END IF;
    UNTIL NOMOREITEMS END REPEAT;

    CLOSE ITENS;

  END IF;
END ¬

DELIMITER ;
/*   isso nunca foi usado, mas a ideia é interessante!
DROP PROCEDURE IF EXISTS PRC_IMPORT_EQUIPMENTS;
DELIMITER ¬
CREATE PROCEDURE PRC_IMPORT_EQUIPMENTS()
SQL SECURITY DEFINER
BEGIN
  DECLARE FINALIZADO BOOLEAN;

  DECLARE ID INTEGER UNSIGNED;
  DECLARE OLD_MODELO VARCHAR(64);
  DECLARE OLD_LUCROBRUTO FLOAT(12,4);
  DECLARE OLD_VALORUNITARIO FLOAT(12,4);
  DECLARE OLD_DISPONIVEL BOOLEAN;
  DECLARE OLD_MOEDA TINYINT;

  DECLARE NEW_MODELO VARCHAR(64);
  DECLARE NEW_LUCROBRUTO FLOAT(12,4);
  DECLARE NEW_VALORUNITARIO FLOAT(12,4);
  DECLARE NEW_MOEDA TINYINT;

  DECLARE EQP CURSOR
      FOR SELECT IN_EQUIPAMENTOS_ID
               , VA_MODELO
               , FL_LUCROBRUTO
               , FL_VALORUNITARIO
               , BO_DISPONIVEL
               , TI_MOEDA
            FROM EQUIPAMENTOS;

  DECLARE CONTINUE HANDLER
      FOR NOT FOUND SET FINALIZADO = TRUE;

  IF NOT @SERVERSIDE THEN

    SET FINALIZADO := FALSE;

    OPEN EQP;

    # CIRCULA POR CADA UM DOS EQUIPAMENTOS DA TABELA "EQUIPAMENTOS"
    REPEAT
      FETCH EQP INTO ID
                   , OLD_MODELO
                   , OLD_LUCROBRUTO
                   , OLD_VALORUNITARIO
                   , OLD_DISPONIVEL
                   , OLD_MOEDA;

      IF NOT FINALIZADO THEN # -------------------------------------------------

        SELECT VA_MODELO
             , FL_LUCROBRUTO
             , FL_VALORUNITARIO
             , TI_MOEDA
          INTO NEW_MODELO
             , NEW_LUCROBRUTO
             , NEW_VALORUNITARIO
             , NEW_MOEDA
          FROM _EQUIPAMENTOS
         WHERE VA_MODELO = OLD_MODELO;

        # SE EU NÃO TIVER ACHADO O EQUIPAMENTO DA VEZ NA TABELA TEMPORÁRIA
        # CONFIGURO APENAS BO_DISPONIVEL COMO FALSE
        IF NEW_MODELO IS NULL THEN

          # SE O EQUIPAMENTO ESTIVER COMO "DISPONÍVEL" NA TABELA "EQUIPAMENTOS"
          # ENTÃO CONFIGURA ELE COMO INDISPONÍVEL (BO_DISPONIVEL = FALSE)
          IF OLD_DISPONIVEL THEN
            UPDATE EQUIPAMENTOS
               SET BO_DISPONIVEL = FALSE
             WHERE IN_EQUIPAMENTOS_ID = ID;
          END IF;

        # SE EU TIVER ACHADO O EQUIPAMENTO DA VEZ NA TABELA TEMPORÁRIA, AÍ SIM!
        ELSE

          UPDATE EQUIPAMENTOS
             SET FL_LUCROBRUTO = NEW_LUCROBRUTO
               , FL_VALORUNITARIO = NEW_VALORUNITARIO
               , BO_DISPONIVEL = TRUE
               , TI_MOEDA = NEW_MOEDA
           WHERE IN_EQUIPAMENTOS_ID = ID;

        END IF;

      END IF; # ----------------------------------------------------------------

    UNTIL FINALIZADO
    END REPEAT;

    CLOSE EQP;

  END IF;
END ¬
DELIMITER ;
*/

DROP PROCEDURE IF EXISTS PRC_ADD_INFORMATION_BEFORE_INSERT;
DELIMITER ¬
CREATE PROCEDURE PRC_ADD_INFORMATION_BEFORE_INSERT (INOUT CREATEUSER SMALLINT UNSIGNED,
													                          INOUT CREATEDATEANDTIME DATETIME,
                                                    INOUT UPDATEUSER SMALLINT UNSIGNED,
                                                    INOUT UPDATEDATEANDTIME DATETIME,
                                                    INOUT SITUATION VARCHAR(12))
SQL SECURITY DEFINER
BEGIN
  IF NOT @ADJUSTINGDB THEN
    # SE EU NO ESTIVER SINCRONIZADNO SIGNIFICA QUE EU ESTOU NO CLIENTE, ENTO
    IF NOT @SYNCHRONIZING THEN
      SET CREATEUSER := @CURRENTLOGGEDUSER;
      SET UPDATEUSER := CREATEUSER;
      SET SITUATION := 'INSERIDO';
      SET CREATEDATEANDTIME := NOW();
      SET UPDATEDATEANDTIME := CREATEDATEANDTIME;
    # CASO ESTEJAMOS SINCRONIZANDO, S DEVEMOS ALTERAR A SITUAO. NO SE DEVE
    # MUDAR AS DATAS DE CRIAO NEM DE ATUALIZAO
    ELSE
      # SE EU ESTIVER DO LADO DO SERVIDOR...
      IF @SERVERSIDE THEN
        SET SITUATION := 'INSERIDO';
      # SE EU ESTIVER DO LADO DO CLIENTE...
      ELSE
        SET SITUATION := 'SINCRONIZADO';
      END IF;
    END IF;
  END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_ADD_INFORMATION_BEFORE_UPDATE;
DELIMITER ¬
CREATE PROCEDURE PRC_ADD_INFORMATION_BEFORE_UPDATE (INOUT UPDATEUSER SMALLINT UNSIGNED,
													                          INOUT UPDATEDATEANDTIME DATETIME,
													                          INOUT SITUATION VARCHAR(12))
SQL SECURITY DEFINER
BEGIN
  IF NOT @ADJUSTINGDB THEN
    # SE EU NÃO ESTIVER SINCRONIZANDO SIGNIFICA QUE EU ESTOU NO CLIENTE, ENTÃO
    IF NOT @SYNCHRONIZING THEN
      SET UPDATEUSER := @CURRENTLOGGEDUSER;
      # SE A DATA DE ULTIMA ATUALIZAO DO REGISTRO EM QUESTO FOR
      # MENOR DO QUE A DATA DA LTIMA SINCRONIZACAO SIGNIFICA QUE
      # ESTAMOS ATUALIZANDO UM REGISTRO ANTIGO, LOGO A SITUACAO
      # TEM DE SER ALTERADA PRA "MODIFICADO"
      IF UPDATEDATEANDTIME < FNC_GET_LASTSYNC_DATETIME() THEN
        SET SITUATION := 'MODIFICADO';
      END IF;
      SET UPDATEDATEANDTIME := NOW();
    ELSE
      # QUANDO ESTAMOS SINCRONIZANDO, QUER DIZER QUE ESTA FUNÇÃO FOI CHAMADA
      # NO SERVIDOR, PORTANTO, REALMENTE HOUVE UMA MODIFICAÇÃO, NO HÁ DVIDAS
      # COMO ACONTECE NO CLIENTE
        IF @SERVERSIDE THEN
          SET SITUATION := 'MODIFICADO';
        ELSE
          SET SITUATION := 'SINCRONIZADO';
        END IF;
    END IF;
  END IF;
END; ¬
DELIMITER ;

# OS STORED PROCEDURES ABAIXO FORAM EXCLUDOS POR FALTA DE USO
DROP PROCEDURE IF EXISTS PRC_ADD_INFORMATION_AFTER_DELETE;
DROP FUNCTION IF EXISTS FNC_BOOLEAN_TO_STRING;
DROP FUNCTION IF EXISTS FNC_GET_CURRENCY_CODE_FROM_CURRENCY_SYMBOL;
DROP FUNCTION IF EXISTS FNC_GET_CURRENCY_SYMBOL;
DROP FUNCTION IF EXISTS FNC_GET_TRANSLATED_ENTITY_TYPE;


DROP FUNCTION IF EXISTS FNC_GET_CURRENCY_CODE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_CURRENCY_CODE (ITEMID INTEGER UNSIGNED)
RETURNS TINYINT UNSIGNED
SQL SECURITY DEFINER
BEGIN
  DECLARE CURRENCYCODE TINYINT UNSIGNED DEFAULT NULL;

  SELECT DISTINCT TI_MOEDA
    INTO CURRENCYCODE
    FROM EQUIPAMENTOSDOSITENS
   WHERE IN_ITENS_ID = ITEMID;

  RETURN CURRENCYCODE;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_CLEAR_DELTA_FROM_ORPHANS;
DELIMITER ¬
CREATE PROCEDURE PRC_CLEAR_DELTA_FROM_ORPHANS(IN TABLENAME VARCHAR(32),
                                              IN KEYVALUE VARCHAR(64))
SQL SECURITY DEFINER
BEGIN
  IF NOT @ADJUSTINGDB THEN
    # A LIMPEZA DE DELTA DEVE SER REALIZADA TANTO NO CLIENTE COMO NO SERVIDOR,
    # MAS SÓ VAI SER REALIZADA NO CLIENTE CASO NÃO ESTEJAMOS EM MODO DE
    # SINCRONIZAO, POIS ISSO SERIA DESNECESSRIO, JÁ QUE O DELTA DO CLIENTE SERÁ
    # LIMPO AO FINAL DA SINCRONIZAO
    IF @SERVERSIDE OR ((NOT @SERVERSIDE) AND (NOT @SYNCHRONIZING)) THEN
      CASE TABLENAME
        WHEN 'OBRAS' THEN 
        BEGIN
          # LIMPANDO A TABELA TEMPORRIA, QUE DEVE SER CRIDA NO MOMENTO EM QUE SE CONECTA COM BANCO;
          DELETE FROM ORPHANFIELDS;

          INSERT INTO ORPHANFIELDS (MI_ORDEM)
                 # PREENCHENDO A TABELA TEMPORRIA COM EQUIPAMENTOS DOS ITENS RFOS
                 SELECT MI_ORDEM
                   FROM DELTA
                  WHERE VA_NOMEDATABELA = 'EQUIPAMENTOSDOSITENS'
                  	# AQUI, AO INVÉS DISSO TINHA APENAS A COLUNA VA_MESTRES
                    AND SUBSTRING(VA_MESTRES,1,LOCATE('>',VA_MESTRES)) IN (SELECT CONCAT('<IN_ITENS_ID=',VA_CHAVE,'>')
                                                                             FROM DELTA
	  																                                        WHERE VA_NOMEDATABELA = 'ITENS'
		  															                                          AND VA_MESTRES IN (SELECT CONCAT('<IN_PROPOSTAS_ID=',VA_CHAVE,'>')
																		                                                               FROM DELTA
																		                                                              WHERE VA_NOMEDATABELA = 'PROPOSTAS'
																		                                                                AND VA_MESTRES = CONCAT('<IN_OBRAS_ID=',KEYVALUE,'>')))
                 UNION
                 # PREENCHENDO A TABELA TEMPORRIA COM OS TENS RFOS
                 SELECT MI_ORDEM
                   FROM DELTA
                  WHERE VA_NOMEDATABELA = 'ITENS'
                    AND VA_MESTRES IN (SELECT CONCAT('<IN_PROPOSTAS_ID=',VA_CHAVE,'>')
                                         FROM DELTA
                                        WHERE VA_NOMEDATABELA = 'PROPOSTAS'
                                          AND VA_MESTRES = CONCAT('<IN_OBRAS_ID=',KEYVALUE,'>'))
                 UNION
                 # PREENCHENDO A TABELA TEMPORRIA COM AS PROPOSTAS RFS
                 SELECT MI_ORDEM
                   FROM DELTA
                  WHERE VA_NOMEDATABELA = 'PROPOSTAS'
                    AND VA_MESTRES = CONCAT('<IN_OBRAS_ID=',KEYVALUE,'>');


          # E FINALMENTE EXCLUINDO TODOS OS REGISTROS RFOS DO DELTA
          DELETE FROM DELTA
           WHERE MI_ORDEM IN (SELECT MI_ORDEM
                                FROM ORPHANFIELDS);
        
          # REMOVENDO AS JUSTIFICATIVAS DAS OBRAS PARA A OBRA ATUAL
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'JUSTIFICATIVASDASOBRAS'
             AND VA_MESTRES LIKE CONCAT('%<IN_OBRAS_ID=',KEYVALUE,'>%');
        END;
        WHEN 'PROPOSTAS' THEN 
        BEGIN
          # LIMPANDO A TABELA TEMPORRIA;
          DELETE FROM ORPHANFIELDS;

          INSERT INTO ORPHANFIELDS (MI_ORDEM)
                 # PREENCHENDO A TABELA TEMPORRIA COM EQUIPAMENTOS DOS ITENS RFOS
                 SELECT MI_ORDEM
                   FROM DELTA
                  WHERE VA_NOMEDATABELA = 'EQUIPAMENTOSDOSITENS'
										# AQUI, AO INVÉS DISSO TINHA APENAS A COLUNA VA_MESTRES
                    AND SUBSTRING(VA_MESTRES,1,LOCATE('>',VA_MESTRES)) IN (SELECT CONCAT('<IN_ITENS_ID=',VA_CHAVE,'>')
                                                                             FROM DELTA
																		                                        WHERE VA_NOMEDATABELA = 'ITENS'
																		                                          AND VA_MESTRES = CONCAT('<IN_PROPOSTAS_ID=',KEYVALUE,'>'))
                 UNION
                 # PREENCHENDO A TABELA TEMPORRIA COM OS TENS RFOS
                 SELECT MI_ORDEM
                   FROM DELTA
                  WHERE VA_NOMEDATABELA = 'ITENS'
                    AND VA_MESTRES = CONCAT('<IN_PROPOSTAS_ID=',KEYVALUE,'>');

          # E FINALMENTE EXCLUINDO TODOS OS REGISTROS RFOS DO DELTA
          DELETE FROM DELTA
           WHERE MI_ORDEM IN (SELECT MI_ORDEM
                                FROM ORPHANFIELDS);
        END;
        WHEN 'ITENS' THEN 
        BEGIN
          # REMOVENDO OS EQUIPAMENTOS DO ITEM
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'EQUIPAMENTOSDOSITENS'
             AND VA_MESTRES LIKE CONCAT('%<IN_ITENS_ID=',KEYVALUE,'>%');
        END;
        WHEN 'ENTIDADESDOSISTEMA' THEN 
        BEGIN
          # REMOVENDO AS PERMISSES DOS GRUPOS QUE TEM A ENTIDADE DO SISTEMA
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'PERMISSOESDOSGRUPOS'
             AND VA_MESTRES LIKE CONCAT('%<IN_ENTIDADESDOSISTEMA_ID=',KEYVALUE,'>%');

          # REMOVENDO AS PERMISSES DOS USURIOS QUE TEM A ENTIDADE DO SISTEMA
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'PERMISSOESDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<IN_ENTIDADESDOSISTEMA_ID=',KEYVALUE,'>%');
        END;
        WHEN 'GRUPOS' THEN 
        BEGIN
          # REMOVENDO OS GRUPOS DOS USURIOS QUE TEM O GRUPO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'GRUPOSDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<TI_GRUPOS_ID=',KEYVALUE,'>%');

          # REMOVENDO AS PERMISSES DOS GRUPOS QUE TEM O GRUPO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'PERMISSOESDOSGRUPOS'
             AND VA_MESTRES LIKE CONCAT('%<TI_GRUPOS_ID=',KEYVALUE,'>%');
        END;
        WHEN 'REGIOES' THEN 
        BEGIN
          # REMOVENDO AS REGIOES DOS USURIOS QUE TEM A REGIO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'REGIOESDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<TI_REGIOES_ID=',KEYVALUE,'>%');
        END;
        WHEN 'USUARIOS' THEN 
        BEGIN
          # REMOVENDO OS GRUPOS DOS USURIOS QUE SO DO USURIO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'GRUPOSDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<SM_USUARIOS_ID=',KEYVALUE,'>%');

          # REMOVENDO AS PERMISSES DOS USURIOS QUE SO DO USURIO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'PERMISSOESDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<SM_USUARIOS_ID=',KEYVALUE,'>%');

          # REMOVENDO AS REGIES DOS USUÁRIOS QUE SÃO DO USUÁRIO
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'REGIOESDOSUSUARIOS'
             AND VA_MESTRES LIKE CONCAT('%<SM_USUARIOS_ID=',KEYVALUE,'>%');
        END;
        WHEN 'JUSTIFICATIVAS' THEN 
        BEGIN
          # REMOVENDO AS JUSTIFICATIVAS DAS OBRAS PARA A JUSTIFICATIVA ATUAL
          # COMO NÃO É PERMITIDO EXCLUIR EM CASCATA REGISTROS DA TABELA DE
          # JUSTIFICATIVASDASOBRAS A PARTIR DA EXCLUSÃO DE UM REGISTRO PAI NA
          # TABELA DE JUSTIFICATIVAS, ISSO AQUI NUNCA VAI OCORRER, MAS COLOQUEI
          # MESMO ASSIM PARA EXEMPLIFICAÇÃO 
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = 'JUSTIFICATIVASDASOBRAS'
             AND VA_MESTRES LIKE CONCAT('%<TI_JUSTIFICATIVAS_ID=',KEYVALUE,'>%');
        END;
        ELSE
        BEGIN
          # NADA PRECISA SER FEITO!
        END;
      END CASE;
    END IF;
  END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_THE_DELTA_CONTAINS;
DELIMITER ¬
CREATE FUNCTION FNC_THE_DELTA_CONTAINS (TABLENAME VARCHAR(32),
                                        KEYVALUE VARCHAR(64),
                                        VERIFY CHAR(1))
RETURNS BOOLEAN
SQL SECURITY DEFINER
BEGIN
  DECLARE QUANTITY INTEGER UNSIGNED;

  IF NOT @ADJUSTINGDB THEN
    CASE VERIFY
      WHEN 'U' THEN BEGIN
        SELECT COUNT(*)
          INTO QUANTITY
          FROM DELTA
         WHERE VA_NOMEDATABELA = TABLENAME
           AND VA_CHAVE = KEYVALUE
           AND EN_ACAO = 'UPD';
      END;
      WHEN 'I' THEN BEGIN
        SELECT COUNT(*)
          INTO QUANTITY
          FROM DELTA
         WHERE VA_NOMEDATABELA = TABLENAME
           AND VA_CHAVE = KEYVALUE
           AND EN_ACAO = 'INS';
      END;
      WHEN 'B' THEN BEGIN
        SELECT COUNT(*)
          INTO QUANTITY
          FROM DELTA
         WHERE VA_NOMEDATABELA = TABLENAME
           AND VA_CHAVE = KEYVALUE;
      END;
    END CASE;

    RETURN (QUANTITY = 1);
  END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_INSERT_INTO_DELTA;
DELIMITER ¬
CREATE PROCEDURE PRC_INSERT_INTO_DELTA(IN TABLENAME VARCHAR(32),
                                       IN KEYVALUE VARCHAR(64),
                                       IN ACTION ENUM('INS','UPD','DEL'),
                                       IN MASTERRECORDS VARCHAR(64))
SQL SECURITY DEFINER
BEGIN
 /* INSERES SO COLOCADAS  NO DELTA SEM  NENHUMA VERIFICAO.  O SCRIPT A  SER
  GERADO CONTER UMA INSTRUO INSERT NORMAL SEM O ID DA TABELA EM QUESTO  PARA
  QUE O MESMO SEJA AUTOINCREMENTADO NO SERVIDOR. */

 /* QUANDO SE  ALTERA  UM  REGISTRO, FAZ-SE  UMA  BUSCA  NO DELTA PROCURANDO UMA
  ENTRADA QUE,  SE  J  EXISTIR,  INDICA  QUE  TRATA-SE  OU DA  ALTERAO DE  UM
  REGISTRO  QUE  AINDA   NO  FOI  ENVIADO  AO  SERVIDOR  (INS)  OU  DA  SEGUNDA
  ALTERAO DE UM REGISTRO ANTIGO (UPD). QUANDO UMA DESTAS SITUAES OCORRE, NO
  DEVEMOS MEXER  EM NADA NO  DELTA. NO PRIMEIRO CASO DEVIDO AO  FATO DE ESTARMOS
  ALTERANDO UM  REGISTRO AINDA NO SINCRONIZADO  E NO SEGUNDO  DEVIDO AO FATO DE
  ESTARMOS ALTERANDO PELA SEGUNDA VEZ O MESMO REGISTRO ANTIGO. NO PRIMEIRO  CASO
  TRATA-SE  DE UMA  INSERO SIMPLES E NO SEGUNDO  UMA ALTERAO. O SCRIPT A SER
  GERADO CONTER UMA INSTRUO INSERT NORMAL SEM O ID DA TABELA EM QUESTO  PARA
  QUE O MESMO SEJA AUTOINCREMENTADO  NO SERVIDOR. PARA O SEGUNDO CASO  HAVER UM
  UPDATE NO REGISTRO ANTIGO. POR OUTRO LADO, QUANDO SE ALTERA E, AO SE FAZER UMA
  BUSCA  NO DELTA NO SE ENCONTRA NADA, INDICA  QUE  TRATA-SE DA ALTERAO DE UM
  REGISTRO  "ANTIGO",  ISTO , QUE J  EST  NO SERVIDOR.  NESSE CASO DEVER SER
  FEITA UMA ALTERAO NO SERVIDOR E  PORTANTO O DELTA CONTER  ESTA  INFORMAO.
  O SCRIPT A SER GERADO CONTER  UMA INSTRUO  INSERT ACRESCIDA DE ON DUPLICATE
  KEY E AINDA COM O ID DO REGISTRO A SER ALTERADO. O MOTIVO PELO QUAL NO SE USA
  UM UPDATE SIMPLES AQUI   QUE  H  A POSSIBILIDADE  DE  UM  OUTRO  CLIENTE TER
  EXCLUDO O REGISTRO QUE ESTAMOS TENTANDO  ALTERAR,  LOGO USAR  UM   INSERT COM
  CAPACIDADE DE  UPDATE  MELHOR: CASO O REGISTRO  NO EXISTA ELE SER  CRIADO E
  CASO ELE EXISTA  SER ALTERADO NORMALMENTE! */

 /* AO SE EXCLUIR  UM REGISTRO  FAZ-SE  UMA BUSCA NO DELTA. SE O  REGISTRO SENDO
  EXCLUIDO FOR  ACHADO  NO  DELTA, E  SE SUA AO  FOR  INS  INDICA  QUE ESTAMOS
  APAGANDO  UM  REGISTRO  QUE   AINDA  NO  FOI   ENVIADO  AO   SERVIDOR,  LOGO,
  SIMPLESMENTE  IMPEDIMOS  QUE  ELE  SEJA  INSERIDO  NO  SERVIDOR,  APAGANDO SUA
  ENTRADA  NO  DELTA. POR OUTRO LADO, SE ELE  FOR ACHADO  NO DELTA E SE SUA AO
  FOR  UPD,  SIGNIFICA  QUE TRATA-SE  DE  UM  REGISTRO  ANTIGO  QUE  TINHA  SIDO
  ALTERADO (UPD)  E  AGORA  FOI EXCLUDO. NESTE  CASO  ALTERA-SE  A AO DE  UPD
  PARA DEL. */
  IF NOT @ADJUSTINGDB THEN
    # CASO EU ESTENA NO CLIENTE E NO ESTEJA SINCRONIZANDO, ESTA FUNO VAI ATUAR
    # DE FORMA COMPLETA
    IF (NOT @SERVERSIDE) AND (NOT @SYNCHRONIZING) THEN
      IF ACTION = 'DEL' THEN
        CALL PRC_CLEAR_DELTA_FROM_ORPHANS(TABLENAME,KEYVALUE);
      END IF;

      IF (ACTION = 'INS') or (((ACTION = 'UPD') or (ACTION = 'DEL')) AND (NOT FNC_THE_DELTA_CONTAINS(TABLENAME,KEYVALUE,'B'))) THEN
        INSERT INTO DELTA (
               VA_NOMEDATABELA
             , VA_MESTRES
             , VA_CHAVE
             , EN_ACAO
               )
        VALUES (
               TABLENAME
             , MASTERRECORDS
             , KEYVALUE
             , ACTION
               );
      ELSE
        IF (ACTION = 'DEL') and FNC_THE_DELTA_CONTAINS(TABLENAME,KEYVALUE,'I') THEN
          DELETE FROM DELTA
           WHERE VA_NOMEDATABELA = TABLENAME
             AND VA_CHAVE = KEYVALUE
             AND EN_ACAO = 'INS';
        ELSE
          IF (ACTION = 'DEL') and FNC_THE_DELTA_CONTAINS(TABLENAME,KEYVALUE,'U') THEN
            UPDATE DELTA
               SET EN_ACAO = 'DEL'
             WHERE VA_NOMEDATABELA = TABLENAME
               AND VA_CHAVE = KEYVALUE
               AND EN_ACAO = 'UPD';
          END IF;
        END IF;
      END IF;
    ELSE
      # @SERVERSIDE = TRUE
      # @SYNCHRONIZING = TRUE

      # @SERVERSIDE = TRUE       | ESTA SITUAÇÃO NUNCA DEVE OCORRER POR QUE QUANDO ESTAMOS
      # @SYNCHRONIZING = FALSE   | NO SERVIDOR, OBRIGATORIAMENTE ESTAMOS TAMBÉM SINCRONIZANDO

      # @SERVERSIDE = FALSE
      # @SYNCHRONIZING = TRUE

      # CASO EU ESTEJA DO LADO DO SERVIDOR EU ESTAREI OBVIAMENTE SINCRONIZANDO,
      # NESTE CASO SIMPLESMENTE INSERE NO DELTA
      IF @SERVERSIDE THEN
        INSERT INTO DELTA (
               VA_NOMEDATABELA
             , VA_MESTRES
             , VA_CHAVE
             , EN_ACAO
             , DT_DATAEHORADAACAO
               )
        VALUES (
               TABLENAME
             , MASTERRECORDS
             , KEYVALUE
             , ACTION
             , SYSDATE()
               );
      # CASO ESTE ELSE SEJA EXECUTADO SIGNIFICA QUE EU ESTOU NO CLIENTE E E ESTOU
      # SINCRONIZANDO NESTE CASO NO DEVO FAZER NADA. A ESTRUTURA COMPLETA IF/ELSE
      # FOI DEIXADA AQUI PARA QUE POSSA SER COPIADA CASO SEJA NECESSRIO
      ELSE
        DO 1;
      END IF;
    END IF;
  END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_ICMS_MULTIPLIER;
DELIMITER ¬
CREATE FUNCTION FNC_GET_ICMS_MULTIPLIER(OBRAID INTEGER UNSIGNED) 
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	DECLARE MAXIMUM_ICMS FLOAT DEFAULT 18;
	DECLARE OBRA_ICMS FLOAT DEFAULT 0;
	
	SELECT MAX(FL_VALOR)
	  INTO MAXIMUM_ICMS
	  FROM ICMS;
	  
	SELECT FL_ICMS
	  INTO OBRA_ICMS
	  FROM OBRAS 
	 WHERE IN_OBRAS_ID = OBRAID;
	 
	RETURN (100 - MAXIMUM_ICMS) / (100 - OBRA_ICMS); 
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_REAJUST_MULTIPLIER;
DELIMITER ¬
CREATE FUNCTION FNC_GET_REAJUST_MULTIPLIER(REAJUST FLOAT) 
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	IF REAJUST > 0 THEN
		RETURN REAJUST / 100 + 1;
	ELSE
		IF REAJUST < 0 THEN
			RETURN (100 - ABS(REAJUST)) / 100;
		ELSE
			RETURN 1;
		END IF;
	END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PART_FROM_STRING;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PART_FROM_STRING(DELIMITEDSTRING VARCHAR(128), DELIMITERCHAR CHAR, PARTNUMBER TINYINT UNSIGNED) 
RETURNS VARCHAR(32) CHARSET latin1
SQL SECURITY DEFINER
BEGIN
	RETURN REPLACE(SUBSTRING(SUBSTRING_INDEX(DELIMITEDSTRING,DELIMITERCHAR,PARTNUMBER),LENGTH(SUBSTRING_INDEX(DELIMITEDSTRING,DELIMITERCHAR,PARTNUMBER - 1)) + 1),DELIMITERCHAR,'');
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_EXCHANGE_MULTIPLIER;
DELIMITER ¬
CREATE FUNCTION FNC_GET_EXCHANGE_MULTIPLIER(ITEMID INTEGER UNSIGNED, EXCHANGEVALUES VARCHAR(39))
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	DECLARE CODIGOMOEDAORIGINAL TINYINT UNSIGNED;
	DECLARE CODIGOMOEDAFINAL TINYINT UNSIGNED;
	DECLARE COTACOES VARCHAR(39);
	
	SELECT DISTINCT 
	       EDI.TI_MOEDA
	     , PRO.TI_MOEDA
	     , PRO.VA_COTACOES
	  INTO CODIGOMOEDAORIGINAL
	     , CODIGOMOEDAFINAL
	     , COTACOES
	  FROM PROPOSTAS PRO
	  JOIN ITENS ITE USING (IN_PROPOSTAS_ID)
	  JOIN EQUIPAMENTOSDOSITENS EDI USING (IN_ITENS_ID)
	 WHERE ITE.IN_ITENS_ID = ITEMID;
	 
	IF EXCHANGEVALUES IS NULL THEN
		IF CODIGOMOEDAFINAL = 3 THEN
			RETURN FNC_GET_PART_FROM_STRING(COTACOES,';',CODIGOMOEDAORIGINAL);
		ELSE
			RETURN FNC_GET_PART_FROM_STRING(COTACOES,';',CODIGOMOEDAORIGINAL) * (1/FNC_GET_PART_FROM_STRING(COTACOES,';',CODIGOMOEDAFINAL));
		END IF;
	ELSE 
		IF CODIGOMOEDAFINAL = 3 THEN
			RETURN FNC_GET_PART_FROM_STRING(EXCHANGEVALUES,';',CODIGOMOEDAORIGINAL);
		ELSE
			RETURN FNC_GET_PART_FROM_STRING(EXCHANGEVALUES,';',CODIGOMOEDAORIGINAL) * (1/FNC_GET_PART_FROM_STRING(EXCHANGEVALUES,';',CODIGOMOEDAFINAL));
		END IF;
	END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_ITEM_VALUE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_ITEM_VALUE(ITEMID INTEGER UNSIGNED, UNITARY BOOLEAN, AUTODETECTEXCHANGE BOOLEAN, EXCHANGEVALUES VARCHAR(39)) 
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	DECLARE ITEM_VALUE DOUBLE DEFAULT 0;
	
	SELECT SUM(EDI.FL_VALORUNITARIO) * FNC_GET_ICMS_MULTIPLIER(OBR.IN_OBRAS_ID) * IF(NOT UNITARY, ITE.SM_QUANTIDADE * FNC_GET_REAJUST_MULTIPLIER(ITE.FL_DESCONTOPERC), 1 ) 
	  INTO ITEM_VALUE
	  FROM EQUIPAMENTOSDOSITENS EDI
	  JOIN ITENS ITE USING (IN_ITENS_ID)
	  JOIN PROPOSTAS PRO USING (IN_PROPOSTAS_ID)
	  JOIN OBRAS OBR USING (IN_OBRAS_ID)
	 WHERE EDI.IN_ITENS_ID = ITEMID;
	 
	IF AUTODETECTEXCHANGE THEN 
		RETURN ITEM_VALUE * FNC_GET_EXCHANGE_MULTIPLIER(ITEMID,NULL); 
	ELSE 
		IF NOT EXCHANGEVALUES IS NULL THEN
			RETURN ITEM_VALUE * FNC_GET_EXCHANGE_MULTIPLIER(ITEMID,EXCHANGEVALUES);
		ELSE
			RETURN ITEM_VALUE;
		END IF;
	END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_BRUTE_PROFIT;
DELIMITER ¬
CREATE FUNCTION FNC_GET_BRUTE_PROFIT(ITEMID INTEGER UNSIGNED)
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	DECLARE LUCROSOMADOS DOUBLE;
	DECLARE REAJUSTE DOUBLE;
	DECLARE ICMS DOUBLE;
	DECLARE IDOBRA INTEGER UNSIGNED;
	
	SELECT OBR.IN_OBRAS_ID 
	  INTO IDOBRA 
	  FROM OBRAS OBR 
	  JOIN PROPOSTAS PRO USING (IN_OBRAS_ID) 
	  JOIN ITENS ITE USING (IN_PROPOSTAS_ID)
	 WHERE ITE.IN_ITENS_ID = ITEMID;
	 
	 SET ICMS := FNC_GET_ICMS_MULTIPLIER(IDOBRA); 
	 
	   SELECT ITE.FL_DESCONTOPERC
	        , SUM(EDI.FL_VALORUNITARIO * EDI.FL_LUCROBRUTO / 100) * ICMS
  	   INTO REAJUSTE, LUCROSOMADOS
	     FROM EQUIPAMENTOSDOSITENS EDI
	     JOIN ITENS ITE USING (IN_ITENS_ID)
	     JOIN PROPOSTAS PRO USING (IN_PROPOSTAS_ID)
  	   JOIN OBRAS OBR USING (IN_OBRAS_ID)
	    WHERE EDI.IN_ITENS_ID = ITEMID
	 GROUP BY ITE.IN_ITENS_ID; 
	 
	 RETURN LUCROSOMADOS / FNC_GET_ITEM_VALUE(ITEMID,TRUE,FALSE,NULL) * 100 + REAJUSTE;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_EXCHANGE_POSITIONS;
DELIMITER ¬
CREATE FUNCTION FNC_EXCHANGE_POSITIONS(IDITEM1 INTEGER UNSIGNED, IDITEM2 INTEGER UNSIGNED) 
RETURNS TINYINT(1)
SQL SECURITY DEFINER
BEGIN 
	CALL PRC_EXCHANGE_POSITIONS (IDITEM1,IDITEM2); 
	RETURN TRUE;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_EXCHANGE_POSITIONS;
DELIMITER ¬
CREATE PROCEDURE PRC_EXCHANGE_POSITIONS(IN IDITEM1 INTEGER UNSIGNED, IN IDITEM2 INTEGER UNSIGNED)
SQL SECURITY DEFINER
BEGIN 
	UPDATE ITENS ITE1
	     , ITENS ITE2
	   SET ITE1.TI_ORDEM = ITE2.TI_ORDEM
	     , ITE2.TI_ORDEM = ITE1.TI_ORDEM
	 WHERE ITE1.IN_ITENS_ID = IDITEM1
	   AND ITE2.IN_ITENS_ID = IDITEM2;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_DEFAULT_PROPOSAL;
DELIMITER ¬
CREATE FUNCTION FNC_GET_DEFAULT_PROPOSAL(IDWORK INTEGER UNSIGNED)
RETURNS INTEGER(10) UNSIGNED
SQL SECURITY DEFINER
BEGIN 
	DECLARE IDDEFAULTPROPOSAL INTEGER UNSIGNED;
	
	SET IDDEFAULTPROPOSAL := 0;
	
	SELECT IN_PROPOSTAS_ID
	  INTO IDDEFAULTPROPOSAL
	  FROM PROPOSTAS
	 WHERE IN_OBRAS_ID = IDWORK
	   AND BO_PROPOSTAPADRAO;
	
	RETURN IDDEFAULTPROPOSAL; 
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PROPOSAL_VALUE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PROPOSAL_VALUE(IDPROPOSAL INTEGER UNSIGNED
                                      ,SUBTOTAL BOOLEAN
                                      ,AUTODETECTEXCHANGE BOOLEAN
                                      ,EXCHANGEVALUES VARCHAR(39)
                                      ,DECIMALPLACES TINYINT)
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	DECLARE VALOR_PROPOSTA DOUBLE; 
	DECLARE DESCONTOPERC FLOAT; 
	DECLARE DESCONTOVAL FLOAT; 

	  # OS VALORES OBTIDOS DOS ITENS COM "FNC_GET_ITEM_VALUE" SÃO INTEGRAIS (COM
    # TODAS AS CASAS DECIMAIS), LOGO O SEU SOMATÓRIO GERA UM VALOR PRECISO,
    # ENTRETANTO NAS PROPOSTAS GERADAS OS VALORES DE CADA ITEM SÃO APRESENTADOS
    # ARREDONDADOS PARA 2 CASAS DECIMAIS E O VALOR FINAL DA PROPOSTA FAZ O
    # CÁLCULO SOMANDO OS VALORES REAIS DE CADA UM DOS ITENS (SEM ARREDONDAMENTO)
    # O QUE CAUSAVA UM DISCREPÂNCIA ENTRE O SOMATÓRIO DO QUE É APRESENTADO E O
    # VALOR FINAL DA PROPOSTA EXIBIDO. A FIM DE RESOLVER ESTA DISCREPÂNCIA, MAIS
    # UM PARÂMETRO FOI INCLUÍDO NESTA FUNÇÃO (FNC_GET_PROPOSAL_VALUE) PARA
    # INFORMAR SE DEVEMOS ARREDONDAR O VALOR DE CADA ITEM ANTES DE SOMAR E PARA
    # QUANTAS CASAS DECIMAIS ISSO DEVE SER FEITO

    IF DECIMALPLACES > -1 THEN

      SELECT SUM(ROUND(FNC_GET_ITEM_VALUE(ITE.IN_ITENS_ID,FALSE,AUTODETECTEXCHANGE,EXCHANGEVALUES),DECIMALPLACES))
           , PRO.FL_DESCONTOPERC
           , PRO.FL_DESCONTOVAL
        INTO VALOR_PROPOSTA
           , DESCONTOPERC
           , DESCONTOVAL
        FROM ITENS ITE
        JOIN PROPOSTAS PRO USING (IN_PROPOSTAS_ID)
       WHERE PRO.IN_PROPOSTAS_ID = IDPROPOSAL
    GROUP BY 2,3;

    ELSE

      SELECT SUM(FNC_GET_ITEM_VALUE(ITE.IN_ITENS_ID,FALSE,AUTODETECTEXCHANGE,EXCHANGEVALUES))
           , PRO.FL_DESCONTOPERC
           , PRO.FL_DESCONTOVAL
        INTO VALOR_PROPOSTA
           , DESCONTOPERC
           , DESCONTOVAL
        FROM ITENS ITE
        JOIN PROPOSTAS PRO USING (IN_PROPOSTAS_ID)
       WHERE PRO.IN_PROPOSTAS_ID = IDPROPOSAL
    GROUP BY 2,3;

    END IF;


	IF NOT SUBTOTAL THEN
	 	SET VALOR_PROPOSTA := VALOR_PROPOSTA * FNC_GET_REAJUST_MULTIPLIER(COALESCE(DESCONTOPERC,0)) + COALESCE(DESCONTOVAL,0);
	END IF;
	
	RETURN VALOR_PROPOSTA;

END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_WORK_VALUE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_WORK_VALUE(IDWORK INTEGER UNSIGNED
                                  ,AUTODETECTEXCHANGE BOOLEAN
                                  ,EXCHANGEVALUES VARCHAR(39)
                                  ,DECIMALPLACES TINYINT)
RETURNS DOUBLE
SQL SECURITY DEFINER
BEGIN 
	RETURN FNC_GET_PROPOSAL_VALUE(FNC_GET_DEFAULT_PROPOSAL(IDWORK),FALSE,AUTODETECTEXCHANGE,EXCHANGEVALUES,DECIMALPLACES);
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_FORMATTED_CAPACITY;
DELIMITER ¬
CREATE FUNCTION FNC_GET_FORMATTED_CAPACITY(CAPACITY FLOAT, UNIT VARCHAR(10)) 
RETURNS VARCHAR(20) CHARSET latin1
SQL SECURITY DEFINER
BEGIN 
	DECLARE UNFORMATTED_CAPACITY VARCHAR(20);
	DECLARE FORMATTED_CAPACITY VARCHAR(20);
	
	SET UNFORMATTED_CAPACITY := FORMAT(CAPACITY,2);                    # 1,000.00
	SET UNFORMATTED_CAPACITY := REPLACE(UNFORMATTED_CAPACITY,'.',';'); # 1,000;00
	SET UNFORMATTED_CAPACITY := REPLACE(UNFORMATTED_CAPACITY,',','.'); # 1.000;00
	SET UNFORMATTED_CAPACITY := REPLACE(UNFORMATTED_CAPACITY,';',','); # 1.000,00
	
	SET FORMATTED_CAPACITY := CONCAT(UNFORMATTED_CAPACITY,' ',UNIT);   # 1.000,00 BTU
	
	IF LOCATE(',00',FORMATTED_CAPACITY) > 0 THEN
		SET FORMATTED_CAPACITY := REPLACE(FORMATTED_CAPACITY,',00','');  # 1.000 BTU
	END IF;
	
	RETURN FORMATTED_CAPACITY;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_FORMATTED_CURRENCY_VALUE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_FORMATTED_CURRENCY_VALUE(CURRENCYVALUE DOUBLE, CURRENCYSYMBOL VARCHAR(4), OUTPUTPOSITIVESIGNAL BOOLEAN) 
RETURNS VARCHAR(30) CHARSET latin1
SQL SECURITY DEFINER
BEGIN 
	DECLARE UNFORMATTED_CURRENCYVALUE VARCHAR(30);
	DECLARE FORMATTED_CURRENCYVALUE VARCHAR(30);
	DECLARE SIGNAL CHAR(1) DEFAULT '';
	
	IF (CURRENCYVALUE > 0) AND OUTPUTPOSITIVESIGNAL THEN 
		SET SIGNAL := '+';
	ELSE 
		IF CURRENCYVALUE < 0 THEN
			SET SIGNAL := '-';
		END IF;
	END IF;
	
	SET UNFORMATTED_CURRENCYVALUE := FORMAT(ABS(CURRENCYVALUE),2);   # 1,000.00
	SET UNFORMATTED_CURRENCYVALUE := REPLACE(UNFORMATTED_CURRENCYVALUE,'.',';'); # 1,000;00
	SET UNFORMATTED_CURRENCYVALUE := REPLACE(UNFORMATTED_CURRENCYVALUE,',','.'); # 1.000;00
	SET UNFORMATTED_CURRENCYVALUE := REPLACE(UNFORMATTED_CURRENCYVALUE,';',','); # 1.000,00
	
	SET FORMATTED_CURRENCYVALUE := CONCAT(SIGNAL,CURRENCYSYMBOL,' ',UNFORMATTED_CURRENCYVALUE); # +R$ 1.000,00
	
	RETURN FORMATTED_CURRENCYVALUE;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_FORMATTED_PERCENTUAL;
DELIMITER ¬
CREATE FUNCTION FNC_GET_FORMATTED_PERCENTUAL(PERCENTUAL FLOAT, OUTPUTPOSITIVESIGNAL BOOLEAN)
RETURNS VARCHAR(20) CHARSET latin1
SQL SECURITY DEFINER
BEGIN 
	DECLARE UNFORMATTED_PERCENTUAL VARCHAR(20);
	DECLARE FORMATTED_PERCENTUAL VARCHAR(20);
	DECLARE SIGNAL CHAR(1) DEFAULT '';
	
	IF OUTPUTPOSITIVESIGNAL AND (PERCENTUAL > 0) THEN 
		SET SIGNAL := '+';
	END IF;
	
	SET UNFORMATTED_PERCENTUAL := FORMAT(PERCENTUAL,2);                    # 1,000.00
	SET UNFORMATTED_PERCENTUAL := REPLACE(UNFORMATTED_PERCENTUAL,'.',';'); # 1,000;00
	SET UNFORMATTED_PERCENTUAL := REPLACE(UNFORMATTED_PERCENTUAL,',','.'); # 1.000;00
	SET UNFORMATTED_PERCENTUAL := REPLACE(UNFORMATTED_PERCENTUAL,';',','); # 1.000,00

	SET FORMATTED_PERCENTUAL := CONCAT(SIGNAL,UNFORMATTED_PERCENTUAL,' %'); # 1.000,00 %
	
	RETURN FORMATTED_PERCENTUAL;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_FORMATTED_PROPOSAL_REAJUST;
DELIMITER ¬
CREATE FUNCTION FNC_GET_FORMATTED_PROPOSAL_REAJUST(IDPROPOSAL INTEGER UNSIGNED, CURRENCYSYMBOL VARCHAR(4))
RETURNS VARCHAR(20) CHARSET latin1
SQL SECURITY DEFINER
BEGIN 
	DECLARE DESCONTOPERC FLOAT; 
	DECLARE DESCONTOVAL FLOAT; 
	
	SELECT FL_DESCONTOPERC
	     , FL_DESCONTOVAL
	  INTO DESCONTOPERC
	     , DESCONTOVAL
	  FROM PROPOSTAS
	 WHERE IN_PROPOSTAS_ID = IDPROPOSAL;
	 
	IF NOT DESCONTOPERC IS NULL THEN
	 	RETURN FNC_GET_FORMATTED_PERCENTUAL(DESCONTOPERC,TRUE);
	ELSE 
	 	RETURN FNC_GET_FORMATTED_CURRENCY_VALUE(DESCONTOVAL,CURRENCYSYMBOL,TRUE);
	END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_LASTSYNC_DATETIME;
DELIMITER ¬
CREATE FUNCTION FNC_GET_LASTSYNC_DATETIME() 
RETURNS DATETIME
SQL SECURITY DEFINER
BEGIN 
	DECLARE LASTSYNCDATETIME DATETIME;
	
	SELECT MAX(DT_DATAEHORADAULTIMA)
	  INTO LASTSYNCDATETIME
	  FROM SINCRONIZACOES;
	  
	RETURN LASTSYNCDATETIME;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_MODELS_FROM_ITEM;
DELIMITER ¬
CREATE FUNCTION FNC_GET_MODELS_FROM_ITEM(IDITEM INTEGER UNSIGNED)
RETURNS VARCHAR(600)
CHARSET latin1
SQL SECURITY DEFINER
BEGIN
	DECLARE MODELOS VARCHAR(600);

	SELECT GROUP_CONCAT(EQP.VA_MODELO SEPARATOR ' | ')
	  INTO MODELOS
	  FROM EQUIPAMENTOSDOSITENS EDI
	  JOIN EQUIPAMENTOS EQP USING (IN_EQUIPAMENTOS_ID)
	 WHERE EDI.IN_ITENS_ID = IDITEM;

	RETURN MODELOS;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_NEXT_ITEM;
DELIMITER ¬
CREATE FUNCTION FNC_GET_NEXT_ITEM(IDITEM INTEGER UNSIGNED) 
RETURNS INT(10) UNSIGNED
SQL SECURITY DEFINER
BEGIN 
	DECLARE NEXTITEM INTEGER UNSIGNED;
	DECLARE PROPOSTADOITEM INTEGER UNSIGNED;
	DECLARE ORDEMATUAL TINYINT UNSIGNED;
	
	SET PROPOSTADOITEM := FNC_GET_PROPOSAL_FROM_ITEM(IDITEM);
	
	SELECT TI_ORDEM 
		INTO ORDEMATUAL
		FROM ITENS
	 WHERE IN_ITENS_ID = IDITEM;
	 
	  SELECT IN_ITENS_ID
	    INTO NEXTITEM
	    FROM ITENS
	   WHERE IN_PROPOSTAS_ID = PROPOSTADOITEM
	     AND TI_ORDEM > ORDEMATUAL
	ORDER BY TI_ORDEM 
	   LIMIT 1;

	RETURN NEXTITEM;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PREVIOUS_ITEM;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PREVIOUS_ITEM(IDITEM INTEGER UNSIGNED) 
RETURNS INT(10) UNSIGNED
SQL SECURITY DEFINER
BEGIN 
	DECLARE PREVIOUSITEM INTEGER UNSIGNED;
	DECLARE PROPOSTADOITEM INTEGER UNSIGNED;
	DECLARE ORDEMATUAL TINYINT UNSIGNED;
	
	SET PROPOSTADOITEM := FNC_GET_PROPOSAL_FROM_ITEM(IDITEM);
	
	SELECT TI_ORDEM 
	  INTO ORDEMATUAL 
	  FROM ITENS 
	 WHERE IN_ITENS_ID = IDITEM;
	 
	  SELECT IN_ITENS_ID
	    INTO PREVIOUSITEM
	    FROM ITENS
	   WHERE IN_PROPOSTAS_ID = PROPOSTADOITEM
	     AND TI_ORDEM < ORDEMATUAL
	ORDER BY TI_ORDEM DESC
	   LIMIT 1; 
	   
	RETURN PREVIOUSITEM;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PROPOSAL_CODE;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PROPOSAL_CODE(IDPROPOSAL INTEGER UNSIGNED)
RETURNS VARCHAR(14) CHARSET latin1
SQL SECURITY DEFINER
BEGIN 
	DECLARE PREFIXODAPROPOSTA VARCHAR(4); 
	DECLARE CODIGO SMALLINT(4) ZEROFILL; 
	DECLARE ANO YEAR(2); 
	
	SELECT REG.CH_PREFIXODAPROPOSTA 
	     , PRO.SM_CODIGO
	     , PRO.YR_ANO
	  INTO PREFIXODAPROPOSTA
	     , CODIGO
	     , ANO
	  FROM REGIOES REG
	  JOIN OBRAS OBR USING (TI_REGIOES_ID)
	  JOIN PROPOSTAS PRO USING (IN_OBRAS_ID)
	 WHERE PRO.IN_PROPOSTAS_ID = IDPROPOSAL;
	 
	IF (CODIGO IS NULL) OR (ANO IS NULL) THEN
		RETURN CONCAT(PREFIXODAPROPOSTA,' - XXXX/XX');
	ELSE
		RETURN CONCAT(PREFIXODAPROPOSTA,' - ',CODIGO,'/',ANO);
	END IF;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PROPOSAL_COUNT;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PROPOSAL_COUNT(IDOBRA INTEGER UNSIGNED) 
RETURNS INTEGER UNSIGNED
SQL SECURITY DEFINER
BEGIN
	DECLARE PROPOSAL_COUNT INTEGER UNSIGNED;
	
	SELECT COUNT(IN_PROPOSTAS_ID)
	  INTO PROPOSAL_COUNT
	  FROM PROPOSTAS
	 WHERE IN_OBRAS_ID = IDOBRA;
	
	RETURN PROPOSAL_COUNT;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_PROPOSAL_FROM_ITEM;
DELIMITER ¬
CREATE FUNCTION FNC_GET_PROPOSAL_FROM_ITEM(IDITEM INTEGER UNSIGNED) 
RETURNS INTEGER UNSIGNED
SQL SECURITY DEFINER
BEGIN 
	DECLARE IDPROPOSTA INTEGER UNSIGNED;
	
	SELECT IN_PROPOSTAS_ID
	  INTO IDPROPOSTA
	  FROM ITENS
	 WHERE IN_ITENS_ID = IDITEM;
	
	RETURN IDPROPOSTA;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_GET_WORK_FROM_PROPOSAL;
DELIMITER ¬
CREATE FUNCTION FNC_GET_WORK_FROM_PROPOSAL(IDPROPOSTA INTEGER UNSIGNED)
RETURNS INTEGER UNSIGNED
SQL SECURITY DEFINER
BEGIN
	DECLARE IDOBRA INTEGER UNSIGNED;
	
	SELECT IN_OBRAS_ID
	  INTO IDOBRA
	  FROM PROPOSTAS
	 WHERE IN_PROPOSTAS_ID = IDPROPOSTA;
	
	RETURN IDOBRA;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_SET_DEFAULT_PROPOSAL;
DELIMITER ¬
CREATE PROCEDURE PRC_SET_DEFAULT_PROPOSAL(IN IDPROPOSTA INTEGER UNSIGNED)
SQL SECURITY DEFINER
BEGIN
	DECLARE IDOBRA INTEGER UNSIGNED;
	
	SET IDOBRA := FNC_GET_WORK_FROM_PROPOSAL(IDPROPOSTA);
	
	UPDATE PROPOSTAS
	   SET BO_PROPOSTAPADRAO = IF(IN_PROPOSTAS_ID = IDPROPOSTA,1,0)
	 WHERE IN_OBRAS_ID = IDOBRA;
END; ¬
DELIMITER ;

DROP FUNCTION IF EXISTS FNC_SET_DEFAULT_PROPOSAL_ON_FIRST_NON_DEFAULT_PROPOSAL;
DROP PROCEDURE IF EXISTS PRC_SET_DEFAULT_PROPOSAL_ON_FIRST_NON_DEFAULT_PROPOSAL;
DELIMITER ¬
CREATE PROCEDURE PRC_SET_DEFAULT_PROPOSAL_ON_FIRST_NON_DEFAULT_PROPOSAL(IN IDWORK INTEGER UNSIGNED) 
SQL SECURITY DEFINER
BEGIN
	DECLARE IDPROPOSTA INTEGER UNSIGNED;
  DECLARE TEMPROPOSTAPADRAO BOOLEAN DEFAULT FALSE;

  # SÓ FAZ ALGUMA COISA SE TIVER ALGUMA PROPOSTA
  IF FNC_GET_PROPOSAL_COUNT(IDWORK) > 0 THEN

    SELECT COUNT(IN_PROPOSTAS_ID) = 1
      INTO TEMPROPOSTAPADRAO
      FROM PROPOSTAS
     WHERE IN_OBRAS_ID = IDWORK
       AND BO_PROPOSTAPADRAO = 1;

    # SE DENTRE AS PROPOSTAS NENHUMA FOR PADRÃO OU SE TIVER MAIS DE UMA PROPOSTA PADRÃO
    # DEVEMOS SETAR COMO PADRÃO UMA (OUTRA) PROPOSTA
    IF NOT TEMPROPOSTAPADRAO THEN

      SELECT IN_PROPOSTAS_ID
        INTO IDPROPOSTA
        FROM PROPOSTAS
       WHERE BO_PROPOSTAPADRAO = 0
         AND IN_OBRAS_ID = IDWORK
    ORDER BY IN_PROPOSTAS_ID
       LIMIT 1;

      IF NOT IDPROPOSTA IS NULL THEN
        CALL PRC_SET_DEFAULT_PROPOSAL(IDPROPOSTA);
      # ESTE ELSE SÓ SERÁ UTILIZADO CASO TODAS AS PROPOSTAS DA OBRA SEJAM PADRÃO, O QUE TAMBÉM NÃO É PERMITIDO
      # DEVEMOS SETAR APENAS A PRIMEIRA DELAS COMO PADRÃO. ESTA SITUAÇÃO NUNCA DEVERIA OCORRER...
      ELSE
        SELECT IN_PROPOSTAS_ID
          INTO IDPROPOSTA
          FROM PROPOSTAS
         WHERE IN_OBRAS_ID = IDWORK
      ORDER BY IN_PROPOSTAS_ID
         LIMIT 1;

        CALL PRC_SET_DEFAULT_PROPOSAL(IDPROPOSTA);
      END IF;
    END IF;
  END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_ADD_POSITION_BEFORE_INSERT;
DELIMITER ¬
CREATE PROCEDURE PRC_ADD_POSITION_BEFORE_INSERT(IN IDPROPOSAL INTEGER UNSIGNED, INOUT SORTPOSITION TINYINT UNSIGNED)
SQL SECURITY DEFINER
BEGIN 
	IF NOT @SYNCHRONIZING THEN
		SELECT COALESCE(MAX(TI_ORDEM),0) + 1
		  INTO SORTPOSITION 
		  FROM ITENS 
		 WHERE IN_PROPOSTAS_ID = IDPROPOSAL;
	END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_SET_CORRECT_REAJUST_BEFORE_POST;
DELIMITER ¬
CREATE PROCEDURE PRC_SET_CORRECT_REAJUST_BEFORE_POST(INOUT REAJUSTPERC FLOAT, INOUT REAJUSTVAL FLOAT)
SQL SECURITY DEFINER
BEGIN 
	IF (REAJUSTPERC IS NULL) AND (REAJUSTVAL IS NULL) THEN 
		SET REAJUSTVAL := 0; 
		SET REAJUSTPERC := NULL; 
	ELSE 
		IF (NOT REAJUSTPERC IS NULL) AND (NOT REAJUSTVAL IS NULL) THEN 
			SET REAJUSTPERC := NULL; 
		END IF; 
	END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_SET_DEFAULT_PROPOSAL_BEFORE_INSERT;
DELIMITER ¬
CREATE PROCEDURE PRC_SET_DEFAULT_PROPOSAL_BEFORE_INSERT(IN IDOBRA INTEGER UNSIGNED, INOUT DEFAULTPROPOSAL BOOLEAN)
SQL SECURITY DEFINER
BEGIN 
	IF NOT @SYNCHRONIZING THEN
		IF FNC_GET_PROPOSAL_COUNT(IDOBRA) = 0 THEN
			SET DEFAULTPROPOSAL := 1;
		ELSE
			SET DEFAULTPROPOSAL := 0;
		END IF;
	END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_SET_WORK_EXPIRATION_DATE_BEFORE_POST;
DELIMITER ¬
CREATE PROCEDURE PRC_SET_WORK_EXPIRATION_DATE_BEFORE_POST(IN IDOLDSITUATION TINYINT, IN IDNEWSITUATION TINYINT, INOUT EXPIRATIONDATE DATE)
SQL SECURITY DEFINER
BEGIN
  DECLARE EXPIRAVEL BOOLEAN;
  DECLARE DAYSTOEXPIRE TINYINT UNSIGNED;

  IF NOT @ADJUSTINGDB THEN
    IF NOT @SYNCHRONIZING THEN
      IF (IDOLDSITUATION IS NULL) OR (IDOLDSITUATION <> IDNEWSITUATION) THEN
        SELECT BO_EXPIRAVEL
             , TI_DIASPARAEXPIRACAO
          INTO EXPIRAVEL
             , DAYSTOEXPIRE
          FROM SITUACOES
         WHERE TI_SITUACOES_ID = IDNEWSITUATION;

        IF EXPIRAVEL THEN
          SET EXPIRATIONDATE := ADDDATE(CURDATE(), DAYSTOEXPIRE);
        ELSE
          SET EXPIRATIONDATE := NULL;
        END IF;
      END IF;
    END IF;
  END IF;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_UPDATE_PROPOSAL_CODE_AND_YEAR;
DELIMITER ¬
CREATE PROCEDURE PRC_UPDATE_PROPOSAL_CODE_AND_YEAR(IN IDPROPOSAL INTEGER UNSIGNED)
SQL SECURITY DEFINER
BEGIN
	# ISSO PODE SER USADO PARA SETAR O VALOR DO CODIGO DE UMA PROPOSTA IMEDIATAMENTE
	# BASTANDO PASSAR O CDIGO DA PROPOSTA. ESTE PROCEDURE SUBSTITUI O VALOR DO CODIGO
	# TODA VEZ QUE FOR CHAMADO 
	DECLARE ANOATUAL YEAR; 
	DECLARE ANO YEAR; 
	DECLARE PROPOSTA SMALLINT UNSIGNED; 
	DECLARE DADOS INTEGER UNSIGNED; 
	DECLARE EXISTE BOOL; 

	SET ANOATUAL := YEAR(NOW());
	
	SELECT BI_ULTIMOVALOR % 10000
	     , FLOOR(BI_ULTIMOVALOR / 10000) 
	  INTO PROPOSTA
	     , ANO
	  FROM SEQUENCIAS 
	 WHERE VA_NOMEDATABELA = 'PROPOSTAS'
	   AND VA_CAMPOSUTILIZADOS = 'SM_CODIGO,YR_ANO';
	   
	IF NOT ISNULL(PROPOSTA) AND ISNULL(ANO) THEN
		IF ANOATUAL > ANO THEN 
			SET DADOS := ANOATUAL * 10000 + 1;
		ELSE
			SET DADOS := ANO * 10000 + PROPOSTA + 1;
		END IF;
		
		SELECT COUNT(*)
		  INTO EXISTE
		  FROM PROPOSTAS
		 WHERE SM_CODIGO = DADOS % 10000
		   AND YR_ANO = FLOOR(DADOS / 10000);
		   
		IF EXISTE > 0 THEN
			SELECT MAX(YR_ANO * 10000 + SM_CODIGO) + 1
			  INTO DADOS
			  FROM PROPOSTAS;
		END IF;
		
		UPDATE SEQUENCIAS 
		   SET BI_ULTIMOVALOR = DADOS
		 WHERE VA_NOMEDATABELA = 'PROPOSTAS'
		   AND VA_CAMPOSUTILIZADOS = 'SM_CODIGO,YR_ANO';
	ELSE 
		SET DADOS := ANOATUAL * 10000 + 1;
		
		SELECT COUNT(*) 
		  INTO EXISTE
		  FROM PROPOSTAS
		 WHERE SM_CODIGO = DADOS % 10000
		   AND YR_ANO = FLOOR(DADOS / 10000);
		
		IF EXISTE > 0 THEN 
			SELECT MAX(YR_ANO * 10000 + SM_CODIGO) + 1
			  INTO DADOS
			  FROM PROPOSTAS;
		END IF; 
		
		INSERT INTO SEQUENCIAS (VA_NOMEDATABELA, VA_CAMPOSUTILIZADOS, BI_ULTIMOVALOR) 
		VALUES ('PROPOSTAS','SM_CODIGO,YR_ANO',DADOS);
	END IF;
	
	UPDATE PROPOSTAS
	   SET SM_CODIGO = DADOS % 10000
	     , YR_ANO = FLOOR(DADOS / 10000)
	 WHERE IN_PROPOSTAS_ID = IDPROPOSAL;
END; ¬
DELIMITER ;

DROP PROCEDURE IF EXISTS PRC_UPDATE_PROPOSAL_CODE_AND_YEAR_BEFORE_INSERT;
DELIMITER ¬
CREATE PROCEDURE PRC_UPDATE_PROPOSAL_CODE_AND_YEAR_BEFORE_INSERT(INOUT PROPOSALCODE SMALLINT UNSIGNED, INOUT PROPOSALYEAR YEAR)
SQL SECURITY DEFINER
BEGIN
	# ISSO É PARA SER USADO NO TRIGGER BEFORE INSERT DA TABELA PROPOSTAS NO SERVIDOR
	DECLARE ANOATUAL YEAR;
	DECLARE ANO YEAR;
	DECLARE PROPOSTA SMALLINT UNSIGNED;
	DECLARE DADOS INTEGER UNSIGNED;
	DECLARE EXISTE BOOL;

  IF (NOT @ADJUSTINGDB) AND @SERVERSIDE THEN
    SET ANOATUAL := YEAR(NOW());

    SELECT BI_ULTIMOVALOR % 10000
         , FLOOR(BI_ULTIMOVALOR / 10000)
      INTO PROPOSTA
         , ANO
      FROM SEQUENCIAS
     WHERE VA_NOMEDATABELA = 'PROPOSTAS'
       AND VA_CAMPOSUTILIZADOS = 'SM_CODIGO,YR_ANO';

    IF NOT (ISNULL(PROPOSTA) AND ISNULL(ANO)) THEN
      IF ANOATUAL > ANO THEN
        SET DADOS := ANOATUAL * 10000 + 1;
      ELSE
        SET DADOS := ANO * 10000 + PROPOSTA + 1;
      END IF;

      SELECT COUNT(*)
        INTO EXISTE
        FROM PROPOSTAS
       WHERE SM_CODIGO = DADOS % 10000
         AND YR_ANO = FLOOR(DADOS / 10000);

      IF EXISTE > 0 THEN
        SELECT MAX(YR_ANO * 10000 + SM_CODIGO) + 1
          INTO DADOS
          FROM PROPOSTAS;
      END IF;

      UPDATE SEQUENCIAS
         SET BI_ULTIMOVALOR = DADOS
       WHERE VA_NOMEDATABELA = 'PROPOSTAS'
         AND VA_CAMPOSUTILIZADOS = 'SM_CODIGO,YR_ANO';
    ELSE
      SET DADOS := ANOATUAL * 10000 + 1;

      SELECT COUNT(*)
        INTO EXISTE
        FROM PROPOSTAS
       WHERE SM_CODIGO = DADOS % 10000
         AND YR_ANO = FLOOR(DADOS / 10000);

      IF EXISTE > 0 THEN
        SELECT MAX(YR_ANO * 10000 + SM_CODIGO) + 1
          INTO DADOS
          FROM PROPOSTAS;
      END IF;

      INSERT INTO SEQUENCIAS (VA_NOMEDATABELA, VA_CAMPOSUTILIZADOS, BI_ULTIMOVALOR)
      VALUES ('PROPOSTAS','SM_CODIGO,YR_ANO',DADOS);
    END IF;

    SET PROPOSALCODE = DADOS % 10000;
    SET PROPOSALYEAR = FLOOR(DADOS / 10000);

	END IF;
END; ¬
DELIMITER ;

# ==============================================================================
# TRIGGERS "AFTER" ESTÃO SENDO USADOS PARA ADIÇÃO NO DELTA
# TRIGGERS "BEFORE" ESTÃO SENDO USADOS PARA ATUALIZAR AS INFORMAÇÕES DE AUDITORIA (4 ULTIMOS CAMPOS DAS TABELAS)

# == ENTIDADESDOSISTEMA ========================================================
ALTER TABLE PERMISSOESDOSUSUARIOS DROP FOREIGN KEY EDS_PDU_FK;
ALTER TABLE PERMISSOESDOSGRUPOS DROP FOREIGN KEY EDS_PDG_FK;
ALTER TABLE PERMISSOESDOSUSUARIOS MODIFY COLUMN IN_ENTIDADESDOSISTEMA_ID INTEGER NOT NULL;
ALTER TABLE PERMISSOESDOSGRUPOS MODIFY COLUMN IN_ENTIDADESDOSISTEMA_ID INTEGER NOT NULL;
ALTER TABLE ENTIDADESDOSISTEMA MODIFY COLUMN IN_ENTIDADESDOSISTEMA_ID INTEGER NOT NULL AUTO_INCREMENT;
ALTER TABLE PERMISSOESDOSUSUARIOS ADD CONSTRAINT EDS_PDU_FK FOREIGN KEY (IN_ENTIDADESDOSISTEMA_ID) REFERENCES ENTIDADESDOSISTEMA (IN_ENTIDADESDOSISTEMA_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PERMISSOESDOSGRUPOS ADD CONSTRAINT EDS_PDG_FK FOREIGN KEY (IN_ENTIDADESDOSISTEMA_ID) REFERENCES ENTIDADESDOSISTEMA (IN_ENTIDADESDOSISTEMA_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_EDS_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_EDS_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_EDS_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_EDS_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_EDS_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_EDS_BEFORE_DELETE;

DELIMITER ¬

CREATE TRIGGER TRG_EDS_AFTER_INSERT AFTER INSERT
ON ENTIDADESDOSISTEMA FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('ENTIDADESDOSISTEMA',NEW.IN_ENTIDADESDOSISTEMA_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_EDS_AFTER_UPDATE AFTER UPDATE
ON ENTIDADESDOSISTEMA FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('ENTIDADESDOSISTEMA',OLD.IN_ENTIDADESDOSISTEMA_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_EDS_AFTER_DELETE AFTER DELETE
ON ENTIDADESDOSISTEMA FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('ENTIDADESDOSISTEMA',OLD.IN_ENTIDADESDOSISTEMA_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_EDS_BEFORE_INSERT BEFORE INSERT
ON ENTIDADESDOSISTEMA FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_EDS_BEFORE_UPDATE BEFORE UPDATE
ON ENTIDADESDOSISTEMA FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == EQUIPAMENTOS ==============================================================
ALTER TABLE EQUIPAMENTOSDOSITENS DROP FOREIGN KEY EQP_EDI_FK;
ALTER TABLE EQUIPAMENTOSDOSITENS MODIFY COLUMN IN_EQUIPAMENTOS_ID INTEGER NOT NULL;
ALTER TABLE EQUIPAMENTOS MODIFY COLUMN IN_EQUIPAMENTOS_ID INTEGER NOT NULL AUTO_INCREMENT;
ALTER TABLE EQUIPAMENTOSDOSITENS ADD CONSTRAINT EQP_EDI_FK FOREIGN KEY (IN_EQUIPAMENTOS_ID) REFERENCES EQUIPAMENTOS (IN_EQUIPAMENTOS_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_EQP_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_EQP_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_EQP_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_EQP_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_EQP_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_EQP_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_EQP_AFTER_INSERT AFTER INSERT
ON EQUIPAMENTOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('EQUIPAMENTOS',NEW.IN_EQUIPAMENTOS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_EQP_AFTER_UPDATE AFTER UPDATE
ON EQUIPAMENTOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('EQUIPAMENTOS',OLD.IN_EQUIPAMENTOS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_EQP_AFTER_DELETE AFTER DELETE
ON EQUIPAMENTOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('EQUIPAMENTOS',OLD.IN_EQUIPAMENTOS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_EQP_BEFORE_INSERT BEFORE INSERT
ON EQUIPAMENTOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_EQP_BEFORE_UPDATE BEFORE UPDATE
ON EQUIPAMENTOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == EQUIPAMENTOSDOSITENS ======================================================
ALTER TABLE EQUIPAMENTOSDOSITENS MODIFY COLUMN IN_EQUIPAMENTOSDOSITENS_ID INTEGER NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_EDI_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_EDI_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_EDI_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_EDI_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_EDI_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_EDI_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_EDI_AFTER_INSERT AFTER INSERT
ON EQUIPAMENTOSDOSITENS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('EQUIPAMENTOSDOSITENS',NEW.IN_EQUIPAMENTOSDOSITENS_ID,'INS',CONCAT('<IN_ITENS_ID=',NEW.IN_ITENS_ID,'><IN_EQUIPAMENTOS_ID=',NEW.IN_EQUIPAMENTOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_EDI_AFTER_DELETE AFTER DELETE
ON EQUIPAMENTOSDOSITENS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('EQUIPAMENTOSDOSITENS',OLD.IN_EQUIPAMENTOSDOSITENS_ID,'DEL',CONCAT('<IN_ITENS_ID=',OLD.IN_ITENS_ID,'><IN_EQUIPAMENTOS_ID=',OLD.IN_EQUIPAMENTOS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_EDI_BEFORE_INSERT BEFORE INSERT
ON EQUIPAMENTOSDOSITENS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == FAMILIAS ==================================================================
ALTER TABLE ITENS DROP FOREIGN KEY FAM_ITE_FK;
ALTER TABLE ITENS MODIFY COLUMN TI_FAMILIAS_ID TINYINT(3) NOT NULL;
ALTER TABLE FAMILIAS MODIFY COLUMN TI_FAMILIAS_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE ITENS ADD CONSTRAINT FAM_ITE_FK FOREIGN KEY (TI_FAMILIAS_ID) REFERENCES FAMILIAS (TI_FAMILIAS_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_FAM_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_FAM_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_FAM_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_FAM_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_FAM_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_FAM_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_FAM_AFTER_INSERT AFTER INSERT
ON FAMILIAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('FAMILIAS',NEW.TI_FAMILIAS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_FAM_AFTER_UPDATE AFTER UPDATE
ON FAMILIAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('FAMILIAS',OLD.TI_FAMILIAS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_FAM_AFTER_DELETE AFTER DELETE
ON FAMILIAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('FAMILIAS',OLD.TI_FAMILIAS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_FAM_BEFORE_INSERT BEFORE INSERT
ON FAMILIAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_FAM_BEFORE_UPDATE BEFORE UPDATE
ON FAMILIAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == GRUPOS ====================================================================
ALTER TABLE GRUPOSDOSUSUARIOS DROP FOREIGN KEY GRU_GDU_FK;
ALTER TABLE GRUPOSDOSUSUARIOS MODIFY COLUMN TI_GRUPOS_ID TINYINT(3) NOT NULL;
ALTER TABLE PERMISSOESDOSGRUPOS DROP FOREIGN KEY GRU_PDG_FK;
ALTER TABLE PERMISSOESDOSGRUPOS MODIFY COLUMN TI_GRUPOS_ID TINYINT(3) NOT NULL;
ALTER TABLE GRUPOS MODIFY COLUMN TI_GRUPOS_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE GRUPOSDOSUSUARIOS ADD CONSTRAINT GRU_GDU_FK FOREIGN KEY (TI_GRUPOS_ID) REFERENCES GRUPOS (TI_GRUPOS_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PERMISSOESDOSGRUPOS ADD CONSTRAINT GRU_PDG_FK FOREIGN KEY (TI_GRUPOS_ID) REFERENCES GRUPOS (TI_GRUPOS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_GRU_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_GRU_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_GRU_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_GRU_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_GRU_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_GRU_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_GRU_AFTER_INSERT AFTER INSERT
ON GRUPOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('GRUPOS',NEW.TI_GRUPOS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_GRU_AFTER_UPDATE AFTER UPDATE
ON GRUPOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('GRUPOS',OLD.TI_GRUPOS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_GRU_AFTER_DELETE AFTER DELETE
ON GRUPOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('GRUPOS',OLD.TI_GRUPOS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_GRU_BEFORE_INSERT BEFORE INSERT
ON GRUPOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_GRU_BEFORE_UPDATE BEFORE UPDATE
ON GRUPOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == GRUPOSDOSUSUARIOS =========================================================
ALTER TABLE GRUPOSDOSUSUARIOS MODIFY COLUMN MI_GRUPOSDOSUSUARIOS_ID MEDIUMINT(8) NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_GDU_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_GDU_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_GDU_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_GDU_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_GDU_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_GDU_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_GDU_AFTER_INSERT AFTER INSERT
ON GRUPOSDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('GRUPOSDOSUSUARIOS',NEW.MI_GRUPOSDOSUSUARIOS_ID,'INS',CONCAT('<SM_USUARIOS_ID=',NEW.SM_USUARIOS_ID,'><TI_GRUPOS_ID=',NEW.TI_GRUPOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_GDU_AFTER_DELETE AFTER DELETE
ON GRUPOSDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('GRUPOSDOSUSUARIOS',OLD.MI_GRUPOSDOSUSUARIOS_ID,'DEL',CONCAT('<SM_USUARIOS_ID=',OLD.SM_USUARIOS_ID,'><TI_GRUPOS_ID=',OLD.TI_GRUPOS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_GDU_BEFORE_INSERT BEFORE INSERT
ON GRUPOSDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == ICMS ======================================================================
ALTER TABLE ICMS MODIFY COLUMN TI_ICMS_ID TINYINT(3) NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_ICM_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_ICM_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_ICM_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_ICM_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_ICM_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_ICM_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_ICM_AFTER_INSERT AFTER INSERT
ON ICMS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('ICMS',NEW.TI_ICMS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_ICM_AFTER_UPDATE AFTER UPDATE
ON ICMS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('ICMS',OLD.TI_ICMS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_ICM_AFTER_DELETE AFTER DELETE
ON ICMS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('ICMS',OLD.TI_ICMS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_ICM_BEFORE_INSERT BEFORE INSERT
ON ICMS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_ICM_BEFORE_UPDATE BEFORE UPDATE
ON ICMS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == INSTALADORES ==============================================================
ALTER TABLE PROPOSTAS DROP FOREIGN KEY INS_PRO_FK;
ALTER TABLE PROPOSTAS MODIFY COLUMN SM_INSTALADORES_ID SMALLINT(5) NOT NULL;
ALTER TABLE INSTALADORES MODIFY COLUMN SM_INSTALADORES_ID SMALLINT(5) NOT NULL AUTO_INCREMENT;
ALTER TABLE PROPOSTAS ADD CONSTRAINT INS_PRO_FK FOREIGN KEY (SM_INSTALADORES_ID) REFERENCES INSTALADORES (SM_INSTALADORES_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_INS_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_INS_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_INS_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_INS_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_INS_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_INS_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_INS_AFTER_INSERT AFTER INSERT
ON INSTALADORES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('INSTALADORES',NEW.SM_INSTALADORES_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_INS_AFTER_UPDATE AFTER UPDATE
ON INSTALADORES FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('INSTALADORES',OLD.SM_INSTALADORES_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_INS_AFTER_DELETE AFTER DELETE
ON INSTALADORES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('INSTALADORES',OLD.SM_INSTALADORES_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_INS_BEFORE_INSERT BEFORE INSERT
ON INSTALADORES FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_INS_BEFORE_UPDATE BEFORE UPDATE
ON INSTALADORES FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == ITENS =====================================================================
ALTER TABLE EQUIPAMENTOSDOSITENS DROP FOREIGN KEY ITE_EDI_FK;
ALTER TABLE EQUIPAMENTOSDOSITENS MODIFY COLUMN IN_ITENS_ID INTEGER NOT NULL;
ALTER TABLE ITENS MODIFY COLUMN IN_ITENS_ID INTEGER NOT NULL AUTO_INCREMENT;
ALTER TABLE EQUIPAMENTOSDOSITENS ADD CONSTRAINT ITE_EDI_FK FOREIGN KEY (IN_ITENS_ID) REFERENCES ITENS (IN_ITENS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_ITE_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_ITE_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_ITE_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_ITE_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_ITE_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_ITE_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_ITE_AFTER_INSERT AFTER INSERT
ON ITENS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('ITENS',NEW.IN_ITENS_ID,'INS',CONCAT('<IN_PROPOSTAS_ID=',NEW.IN_PROPOSTAS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_ITE_AFTER_UPDATE AFTER UPDATE
ON ITENS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('ITENS',OLD.IN_ITENS_ID,'UPD',CONCAT('<IN_PROPOSTAS_ID=',OLD.IN_PROPOSTAS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_ITE_AFTER_DELETE AFTER DELETE
ON ITENS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('ITENS',OLD.IN_ITENS_ID,'DEL',CONCAT('<IN_PROPOSTAS_ID=',OLD.IN_PROPOSTAS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_ITE_BEFORE_INSERT BEFORE INSERT
ON ITENS FOR EACH ROW
BEGIN
	CALL PRC_ADD_POSITION_BEFORE_INSERT(NEW.IN_PROPOSTAS_ID,NEW.TI_ORDEM);
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_ITE_BEFORE_UPDATE BEFORE UPDATE
ON ITENS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == JUSTIFICATIVAS ============================================================
CREATE TABLE JUSTIFICATIVAS (TI_JUSTIFICATIVAS_ID TINYINT NOT NULL AUTO_INCREMENT
                            ,EN_CATEGORIA ENUM('C','T') NOT NULL
                            ,VA_JUSTIFICATIVA VARCHAR(128) NOT NULL
                            ,SM_USUARIOCRIADOR_ID SMALLINT UNSIGNED DEFAULT NULL
                            ,DT_DATAEHORADACRIACAO DATETIME DEFAULT NULL
                            ,SM_USUARIOMODIFICADOR_ID SMALLINT UNSIGNED DEFAULT NULL
                            ,DT_DATAEHORADAMODIFICACAO DATETIME DEFAULT NULL
                            ,EN_SITUACAO ENUM('INSERIDO','MODIFICADO','SINCRONIZADO') DEFAULT NULL
                            ,PRIMARY KEY (TI_JUSTIFICATIVAS_ID))
ENGINE = InnoDB
COMMENT = 'MNE=JUS';

DROP TRIGGER IF EXISTS TRG_JUS_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_JUS_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_JUS_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_JUS_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_JUS_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_JUS_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_JUS_AFTER_INSERT AFTER INSERT
ON JUSTIFICATIVAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('JUSTIFICATIVAS',NEW.TI_JUSTIFICATIVAS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_JUS_AFTER_UPDATE AFTER UPDATE
ON JUSTIFICATIVAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('JUSTIFICATIVAS',OLD.TI_JUSTIFICATIVAS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_JUS_AFTER_DELETE AFTER DELETE
ON JUSTIFICATIVAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('JUSTIFICATIVAS',OLD.TI_JUSTIFICATIVAS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_JUS_BEFORE_INSERT BEFORE INSERT
ON JUSTIFICATIVAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_JUS_BEFORE_UPDATE BEFORE UPDATE
ON JUSTIFICATIVAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ------------------------------------------------------------------------------

# POPULANDO A TABELA DE JUSTIFICATIVAS INICIALMENTE
INSERT INTO JUSTIFICATIVAS (EN_CATEGORIA
                           ,VA_JUSTIFICATIVA
                           ,SM_USUARIOCRIADOR_ID
                           ,DT_DATAEHORADACRIACAO
                           ,SM_USUARIOMODIFICADOR_ID
                           ,DT_DATAEHORADAMODIFICACAO
                           ,EN_SITUACAO)
VALUES ('C','PREÇO',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','PRAZO DE ENTREGA',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','CONDIÇÃO DE PAGAMENTO',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','COMISSÃO PARA O INSTALADOR',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','INFLUÊNCIA DO PROJETISTA',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','INSATISFAÇÃO COM A MARCA',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','HITACHI NÃO FABRICA',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','INSTALAÇÃO CARA',1,NOW(),1,NOW(),'INSERIDO')
     , ('C','O CLIENTE NÃO DETERMINOU O MOTIVO',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','GÁS REFRIGERANTE NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','"DESIGN" DO EQUIPAMENTO',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','CONSUMO ENERGIA',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','NÍVEL DE RUIDO',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','AUTOMAÇÃO',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','OUTRA CARACTERISTICA TÉCNICA ESPECÍFICA NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','COR',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','EDITAL NÃO PERMITE NOSSA PARTICIPAÇÃO POR MOTIVOS TÉCNICOS',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','COMPRESSOR NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','CONDENSADOR NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','EVAPORADOR NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','VÁLVULA DE EXPANSÃO NÃO ATENDE',1,NOW(),1,NOW(),'INSERIDO')
     , ('T','NÚMERO DE COMPRESSORES OU CICLOS',1,NOW(),1,NOW(),'INSERIDO');
# ==============================================================================

# == OBRAS =====================================================================
ALTER TABLE PROPOSTAS DROP FOREIGN KEY OBR_PRO_FK;
ALTER TABLE PROPOSTAS MODIFY COLUMN IN_OBRAS_ID INTEGER NOT NULL;
ALTER TABLE OBRAS MODIFY COLUMN IN_OBRAS_ID INTEGER NOT NULL AUTO_INCREMENT;
ALTER TABLE PROPOSTAS ADD CONSTRAINT OBR_PRO_FK FOREIGN KEY (IN_OBRAS_ID) REFERENCES OBRAS (IN_OBRAS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_OBR_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_OBR_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_OBR_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_OBR_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_OBR_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_OBR_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_OBR_AFTER_INSERT AFTER INSERT
ON OBRAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('OBRAS',NEW.IN_OBRAS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_OBR_AFTER_UPDATE AFTER UPDATE
ON OBRAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('OBRAS',OLD.IN_OBRAS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_OBR_AFTER_DELETE AFTER DELETE
ON OBRAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('OBRAS',OLD.IN_OBRAS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_OBR_BEFORE_INSERT BEFORE INSERT
ON OBRAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
  CALL PRC_SET_WORK_EXPIRATION_DATE_BEFORE_POST(NULL,NEW.TI_SITUACOES_ID,NEW.DA_DATADEEXPIRACAO);
END; ¬

CREATE TRIGGER TRG_OBR_BEFORE_UPDATE BEFORE UPDATE
ON OBRAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
  CALL PRC_SET_WORK_EXPIRATION_DATE_BEFORE_POST(OLD.TI_SITUACOES_ID,NEW.TI_SITUACOES_ID,NEW.DA_DATADEEXPIRACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == JUSTIFICATIVASDASOBRAS ====================================================
CREATE TABLE JUSTIFICATIVASDASOBRAS (MI_JUSTIFICATIVASDASOBRAS_ID MEDIUMINT NOT NULL AUTO_INCREMENT
                                    ,IN_OBRAS_ID INTEGER NOT NULL
                                    ,TI_JUSTIFICATIVAS_ID TINYINT NOT NULL
                                    ,SM_USUARIOCRIADOR_ID SMALLINT UNSIGNED DEFAULT NULL
                                    ,DT_DATAEHORADACRIACAO DATETIME DEFAULT NULL
                                    ,SM_USUARIOMODIFICADOR_ID SMALLINT UNSIGNED DEFAULT NULL
                                    ,DT_DATAEHORADAMODIFICACAO DATETIME DEFAULT NULL
                                    ,EN_SITUACAO ENUM('INSERIDO','MODIFICADO','SINCRONIZADO') DEFAULT NULL
                                    ,PRIMARY KEY (MI_JUSTIFICATIVASDASOBRAS_ID)
                                    ,UNIQUE INDEX JDO_IN_OBRAS_ID_TI_JUSTIFICATIVAS_ID_UI (IN_OBRAS_ID, TI_JUSTIFICATIVAS_ID)
                                    ,INDEX OBR_JDO_IX (IN_OBRAS_ID)
                                    ,INDEX JUS_JDO_IX (TI_JUSTIFICATIVAS_ID)
                                    ,CONSTRAINT OBR_JDO_FK FOREIGN KEY OBR_JDO_FK (IN_OBRAS_ID) REFERENCES OBRAS (IN_OBRAS_ID) ON DELETE CASCADE ON UPDATE CASCADE
                                    ,CONSTRAINT JUS_JDO_FK FOREIGN KEY JUS_JDO_FK (TI_JUSTIFICATIVAS_ID) REFERENCES JUSTIFICATIVAS (TI_JUSTIFICATIVAS_ID) ON DELETE RESTRICT ON UPDATE CASCADE)
ENGINE = InnoDB
COMMENT = 'MNE=JDO';

DROP TRIGGER IF EXISTS TRG_JDO_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_JDO_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_JDO_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_JDO_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_JDO_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_JDO_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_JDO_AFTER_INSERT AFTER INSERT
ON JUSTIFICATIVASDASOBRAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('JUSTIFICATIVASDASOBRAS',NEW.MI_JUSTIFICATIVASDASOBRAS_ID,'INS',CONCAT('<IN_OBRAS_ID=',NEW.IN_OBRAS_ID,'><TI_JUSTIFICATIVAS_ID=',NEW.TI_JUSTIFICATIVAS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_JDO_AFTER_DELETE AFTER DELETE
ON JUSTIFICATIVASDASOBRAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('JUSTIFICATIVASDASOBRAS',OLD.MI_JUSTIFICATIVASDASOBRAS_ID,'DEL',CONCAT('<IN_OBRAS_ID=',OLD.IN_OBRAS_ID,'><TI_JUSTIFICATIVAS_ID=',OLD.TI_JUSTIFICATIVAS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_JDO_BEFORE_INSERT BEFORE INSERT
ON JUSTIFICATIVASDASOBRAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == PERMISSOESDOSGRUPOS =======================================================
ALTER TABLE PERMISSOESDOSGRUPOS MODIFY COLUMN IN_PERMISSOESDOSGRUPOS_ID INTEGER NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_PDG_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_PDG_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_PDG_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_PDG_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_PDG_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_PDG_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_PDG_AFTER_INSERT AFTER INSERT
ON PERMISSOESDOSGRUPOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSGRUPOS',NEW.IN_PERMISSOESDOSGRUPOS_ID,'INS',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',NEW.IN_ENTIDADESDOSISTEMA_ID,'><TI_GRUPOS_ID=',NEW.TI_GRUPOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PDG_AFTER_UPDATE AFTER UPDATE
ON PERMISSOESDOSGRUPOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSGRUPOS',OLD.IN_PERMISSOESDOSGRUPOS_ID,'UPD',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',OLD.IN_ENTIDADESDOSISTEMA_ID,'><TI_GRUPOS_ID=',OLD.TI_GRUPOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PDG_AFTER_DELETE AFTER DELETE
ON PERMISSOESDOSGRUPOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSGRUPOS',OLD.IN_PERMISSOESDOSGRUPOS_ID,'DEL',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',OLD.IN_ENTIDADESDOSISTEMA_ID,'><TI_GRUPOS_ID=',OLD.TI_GRUPOS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_PDG_BEFORE_INSERT BEFORE INSERT
ON PERMISSOESDOSGRUPOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_PDG_BEFORE_UPDATE BEFORE UPDATE
ON PERMISSOESDOSGRUPOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == PERMISSOESDOSUSUARIOS =====================================================
ALTER TABLE PERMISSOESDOSUSUARIOS MODIFY COLUMN IN_PERMISSOESDOSUSUARIOS_ID INTEGER NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_PDU_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_PDU_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_PDU_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_PDU_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_PDU_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_PDU_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_PDU_AFTER_INSERT AFTER INSERT
ON PERMISSOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSUSUARIOS',NEW.IN_PERMISSOESDOSUSUARIOS_ID,'INS',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',NEW.IN_ENTIDADESDOSISTEMA_ID,'><SM_USUARIOS_ID=',NEW.SM_USUARIOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PDU_AFTER_UPDATE AFTER UPDATE
ON PERMISSOESDOSUSUARIOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSUSUARIOS',OLD.IN_PERMISSOESDOSUSUARIOS_ID,'UPD',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',OLD.IN_ENTIDADESDOSISTEMA_ID,'><SM_USUARIOS_ID=',OLD.SM_USUARIOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PDU_AFTER_DELETE AFTER DELETE
ON PERMISSOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PERMISSOESDOSUSUARIOS',OLD.IN_PERMISSOESDOSUSUARIOS_ID,'DEL',CONCAT('<IN_ENTIDADESDOSISTEMA_ID=',OLD.IN_ENTIDADESDOSISTEMA_ID,'><SM_USUARIOS_ID=',OLD.SM_USUARIOS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_PDU_BEFORE_INSERT BEFORE INSERT
ON PERMISSOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_PDU_BEFORE_UPDATE BEFORE UPDATE
ON PERMISSOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == PROJETISTAS ===============================================================
ALTER TABLE OBRAS DROP FOREIGN KEY PRJ_OBR_FK;
ALTER TABLE OBRAS MODIFY COLUMN SM_PROJETISTAS_ID SMALLINT(5) NOT NULL;
ALTER TABLE PROJETISTAS MODIFY COLUMN SM_PROJETISTAS_ID SMALLINT(5) NOT NULL AUTO_INCREMENT;
ALTER TABLE OBRAS ADD CONSTRAINT PRJ_OBR_FK FOREIGN KEY (SM_PROJETISTAS_ID) REFERENCES PROJETISTAS (SM_PROJETISTAS_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_PRJ_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_PRJ_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_PRJ_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_PRJ_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_PRJ_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_PRJ_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_PRJ_AFTER_INSERT AFTER INSERT
ON PROJETISTAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PROJETISTAS',NEW.SM_PROJETISTAS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_PRJ_AFTER_UPDATE AFTER UPDATE
ON PROJETISTAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('PROJETISTAS',OLD.SM_PROJETISTAS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_PRJ_AFTER_DELETE AFTER DELETE
ON PROJETISTAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PROJETISTAS',OLD.SM_PROJETISTAS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_PRJ_BEFORE_INSERT BEFORE INSERT
ON PROJETISTAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_PRJ_BEFORE_UPDATE BEFORE UPDATE
ON PROJETISTAS FOR EACH ROW
BEGIN
  CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == PROPOSTAS =================================================================
ALTER TABLE ITENS DROP FOREIGN KEY PRO_ITE_FK;
ALTER TABLE ITENS MODIFY COLUMN IN_PROPOSTAS_ID INTEGER NOT NULL;
ALTER TABLE PROPOSTAS MODIFY COLUMN IN_PROPOSTAS_ID INTEGER NOT NULL AUTO_INCREMENT;
ALTER TABLE ITENS ADD CONSTRAINT PRO_ITE_FK FOREIGN KEY (IN_PROPOSTAS_ID) REFERENCES PROPOSTAS (IN_PROPOSTAS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_PRO_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_PRO_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_PRO_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_PRO_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_PRO_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_PRO_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_PRO_AFTER_INSERT AFTER INSERT
ON PROPOSTAS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('PROPOSTAS',NEW.IN_PROPOSTAS_ID,'INS',CONCAT('<IN_OBRAS_ID=',NEW.IN_OBRAS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PRO_AFTER_UPDATE AFTER UPDATE
ON PROPOSTAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('PROPOSTAS',OLD.IN_PROPOSTAS_ID,'UPD',CONCAT('<IN_OBRAS_ID=',OLD.IN_OBRAS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_PRO_AFTER_DELETE AFTER DELETE
ON PROPOSTAS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('PROPOSTAS',OLD.IN_PROPOSTAS_ID,'DEL',CONCAT('<IN_OBRAS_ID=',OLD.IN_OBRAS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_PRO_BEFORE_INSERT BEFORE INSERT
ON PROPOSTAS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
	CALL PRC_UPDATE_PROPOSAL_CODE_AND_YEAR_BEFORE_INSERT (NEW.SM_CODIGO, NEW.YR_ANO);
	CALL PRC_SET_DEFAULT_PROPOSAL_BEFORE_INSERT(NEW.IN_OBRAS_ID,NEW.BO_PROPOSTAPADRAO);
	CALL PRC_SET_CORRECT_REAJUST_BEFORE_POST(NEW.FL_DESCONTOPERC,NEW.FL_DESCONTOVAL);
END; ¬

CREATE TRIGGER TRG_PRO_BEFORE_UPDATE BEFORE UPDATE
ON PROPOSTAS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
	CALL PRC_SET_CORRECT_REAJUST_BEFORE_POST(NEW.FL_DESCONTOPERC,NEW.FL_DESCONTOVAL);
END; ¬

DELIMITER ;
# ==============================================================================

# == REGIOES ===================================================================
ALTER TABLE OBRAS DROP FOREIGN KEY REG_OBR_FK;
ALTER TABLE OBRAS MODIFY COLUMN TI_REGIOES_ID TINYINT(3) NOT NULL;
ALTER TABLE REGIOESDOSUSUARIOS DROP FOREIGN KEY REG_RDU_FK;
ALTER TABLE REGIOESDOSUSUARIOS MODIFY COLUMN TI_REGIOES_ID TINYINT(3) NOT NULL;
ALTER TABLE REGIOES MODIFY COLUMN TI_REGIOES_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE OBRAS ADD CONSTRAINT REG_OBR_FK FOREIGN KEY (TI_REGIOES_ID) REFERENCES REGIOES (TI_REGIOES_ID) ON UPDATE CASCADE;
ALTER TABLE REGIOESDOSUSUARIOS ADD CONSTRAINT REG_RDU_FK FOREIGN KEY (TI_REGIOES_ID) REFERENCES REGIOES (TI_REGIOES_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_REG_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_REG_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_REG_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_REG_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_REG_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_REG_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_REG_AFTER_INSERT AFTER INSERT
ON REGIOES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('REGIOES',NEW.TI_REGIOES_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_REG_AFTER_UPDATE AFTER UPDATE
ON REGIOES FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('REGIOES',OLD.TI_REGIOES_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_REG_AFTER_DELETE AFTER DELETE
ON REGIOES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('REGIOES',OLD.TI_REGIOES_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_REG_BEFORE_INSERT BEFORE INSERT
ON REGIOES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_REG_BEFORE_UPDATE BEFORE UPDATE
ON REGIOES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO); 
END; ¬

DELIMITER ;
# ==============================================================================

# == REGIOESDOSUSUARIOS =========================================================
ALTER TABLE REGIOESDOSUSUARIOS MODIFY COLUMN MI_REGIOESDOSUSUARIOS_ID MEDIUMINT(8) NOT NULL AUTO_INCREMENT;

DROP TRIGGER IF EXISTS TRG_RDU_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_RDU_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_RDU_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_RDU_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_RDU_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_RDU_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_RDU_AFTER_INSERT AFTER INSERT
ON REGIOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('REGIOESDOSUSUARIOS',NEW.MI_REGIOESDOSUSUARIOS_ID,'INS',CONCAT('<TI_REGIOES_ID=',NEW.TI_REGIOES_ID,'><SM_USUARIOS_ID=',NEW.SM_USUARIOS_ID,'>'));
END; ¬

CREATE TRIGGER TRG_RDU_AFTER_DELETE AFTER DELETE
ON REGIOESDOSUSUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('REGIOESDOSUSUARIOS',OLD.MI_REGIOESDOSUSUARIOS_ID,'DEL',CONCAT('<TI_REGIOES_ID=',OLD.TI_REGIOES_ID,'><SM_USUARIOS_ID=',OLD.SM_USUARIOS_ID,'>'));
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_RDU_BEFORE_INSERT BEFORE INSERT
ON REGIOESDOSUSUARIOS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == SITUACOES =================================================================
ALTER TABLE OBRAS DROP FOREIGN KEY SIT_OBR_FK;
ALTER TABLE OBRAS MODIFY COLUMN TI_SITUACOES_ID TINYINT(3) NOT NULL;
ALTER TABLE SITUACOES MODIFY COLUMN TI_SITUACOES_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE OBRAS ADD CONSTRAINT SIT_OBR_FK FOREIGN KEY (TI_SITUACOES_ID) REFERENCES SITUACOES (TI_SITUACOES_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_SIT_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_SIT_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_SIT_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_SIT_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_SIT_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_SIT_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_SIT_AFTER_INSERT AFTER INSERT
ON SITUACOES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('SITUACOES',NEW.TI_SITUACOES_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_SIT_AFTER_UPDATE AFTER UPDATE
ON SITUACOES FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('SITUACOES',OLD.TI_SITUACOES_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_SIT_AFTER_DELETE AFTER DELETE
ON SITUACOES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('SITUACOES',OLD.TI_SITUACOES_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_SIT_BEFORE_INSERT BEFORE INSERT
ON SITUACOES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_SIT_BEFORE_UPDATE BEFORE UPDATE
ON SITUACOES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

DELIMITER ;
# ==============================================================================

# == TIPOS =====================================================================
ALTER TABLE OBRAS DROP FOREIGN KEY TIP_OBR_FK;
ALTER TABLE OBRAS MODIFY COLUMN TI_TIPOS_ID TINYINT(3) NOT NULL;
ALTER TABLE TIPOS MODIFY COLUMN TI_TIPOS_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE OBRAS ADD CONSTRAINT TIP_OBR_FK FOREIGN KEY (TI_TIPOS_ID) REFERENCES TIPOS (TI_TIPOS_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_TIP_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_TIP_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_TIP_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_TIP_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_TIP_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_TIP_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_TIP_AFTER_INSERT AFTER INSERT
ON TIPOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('TIPOS',NEW.TI_TIPOS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_TIP_AFTER_UPDATE AFTER UPDATE
ON TIPOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('TIPOS',OLD.TI_TIPOS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_TIP_AFTER_DELETE AFTER DELETE
ON TIPOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('TIPOS',OLD.TI_TIPOS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_TIP_BEFORE_INSERT BEFORE INSERT
ON TIPOS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_TIP_BEFORE_UPDATE BEFORE UPDATE
ON TIPOS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO); 
END; ¬

DELIMITER ;
# ==============================================================================

# == UNIDADES ==================================================================
ALTER TABLE ITENS DROP FOREIGN KEY UNI_ITE_FK;
ALTER TABLE ITENS MODIFY COLUMN TI_UNIDADES_ID TINYINT(3) NOT NULL;
ALTER TABLE UNIDADES MODIFY COLUMN TI_UNIDADES_ID TINYINT(3) NOT NULL AUTO_INCREMENT;
ALTER TABLE ITENS ADD CONSTRAINT UNI_ITE_FK FOREIGN KEY (TI_UNIDADES_ID) REFERENCES UNIDADES (TI_UNIDADES_ID) ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_UNI_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_UNI_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_UNI_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_UNI_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_UNI_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_UNI_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_UNI_AFTER_INSERT AFTER INSERT
ON UNIDADES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('UNIDADES',NEW.TI_UNIDADES_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_UNI_AFTER_UPDATE AFTER UPDATE
ON UNIDADES FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('UNIDADES',OLD.TI_UNIDADES_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_UNI_AFTER_DELETE AFTER DELETE
ON UNIDADES FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('UNIDADES',OLD.TI_UNIDADES_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_UNI_BEFORE_INSERT BEFORE INSERT
ON UNIDADES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_UNI_BEFORE_UPDATE BEFORE UPDATE
ON UNIDADES FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO); 
END; ¬

DELIMITER ;
# ==============================================================================

# == USUARIOS ==================================================================
ALTER TABLE GRUPOSDOSUSUARIOS DROP FOREIGN KEY USU_GDU_FK;
ALTER TABLE GRUPOSDOSUSUARIOS MODIFY COLUMN SM_USUARIOS_ID SMALLINT(5) NOT NULL;
ALTER TABLE PERMISSOESDOSUSUARIOS DROP FOREIGN KEY USU_PDU_FK;
ALTER TABLE PERMISSOESDOSUSUARIOS MODIFY COLUMN SM_USUARIOS_ID SMALLINT(5) NOT NULL;
ALTER TABLE REGIOESDOSUSUARIOS DROP FOREIGN KEY USU_RDU_FK;
ALTER TABLE REGIOESDOSUSUARIOS MODIFY COLUMN SM_USUARIOS_ID SMALLINT(5) NOT NULL;
ALTER TABLE USUARIOS MODIFY COLUMN SM_USUARIOS_ID SMALLINT(5) NOT NULL AUTO_INCREMENT;
ALTER TABLE GRUPOSDOSUSUARIOS ADD CONSTRAINT USU_GDU_FK FOREIGN KEY (SM_USUARIOS_ID) REFERENCES USUARIOS (SM_USUARIOS_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE PERMISSOESDOSUSUARIOS ADD CONSTRAINT USU_PDU_FK FOREIGN KEY (SM_USUARIOS_ID) REFERENCES USUARIOS (SM_USUARIOS_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE REGIOESDOSUSUARIOS ADD CONSTRAINT USU_RDU_FK FOREIGN KEY (SM_USUARIOS_ID) REFERENCES USUARIOS (SM_USUARIOS_ID) ON DELETE CASCADE ON UPDATE CASCADE;

DROP TRIGGER IF EXISTS TRG_USU_AFTER_INSERT;
DROP TRIGGER IF EXISTS TRG_USU_AFTER_UPDATE;
DROP TRIGGER IF EXISTS TRG_USU_AFTER_DELETE;

DROP TRIGGER IF EXISTS TRG_USU_BEFORE_INSERT;
DROP TRIGGER IF EXISTS TRG_USU_BEFORE_UPDATE;
DROP TRIGGER IF EXISTS TRG_USU_BEFORE_DELETE;

DELIMITER ¬
CREATE TRIGGER TRG_USU_AFTER_INSERT AFTER INSERT
ON USUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('USUARIOS',NEW.SM_USUARIOS_ID,'INS',NULL);
END; ¬

CREATE TRIGGER TRG_USU_AFTER_UPDATE AFTER UPDATE
ON USUARIOS FOR EACH ROW
BEGIN
	CALL PRC_INSERT_INTO_DELTA('USUARIOS',OLD.SM_USUARIOS_ID,'UPD',NULL);
END; ¬

CREATE TRIGGER TRG_USU_AFTER_DELETE AFTER DELETE
ON USUARIOS FOR EACH ROW
BEGIN
  CALL PRC_INSERT_INTO_DELTA('USUARIOS',OLD.SM_USUARIOS_ID,'DEL',NULL);
END; ¬

# ------------------------------------------------------------------------------

CREATE TRIGGER TRG_USU_BEFORE_INSERT BEFORE INSERT
ON USUARIOS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_INSERT(NEW.SM_USUARIOCRIADOR_ID,NEW.DT_DATAEHORADACRIACAO,NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO);
END; ¬

CREATE TRIGGER TRG_USU_BEFORE_UPDATE BEFORE UPDATE
ON USUARIOS FOR EACH ROW
BEGIN
	CALL PRC_ADD_INFORMATION_BEFORE_UPDATE(NEW.SM_USUARIOMODIFICADOR_ID,NEW.DT_DATAEHORADAMODIFICACAO,NEW.EN_SITUACAO); 
END; ¬

DELIMITER ;
# ==============================================================================

# == AJUSTES ESTRUTURAIS E DE DADOS ============================================
# O MODO DE CRIPTOGRAFIA FOI ALTERADO. TODAS AS SENHAS TEM DE SER RESETADAS
UPDATE USUARIOS
   SET TB_SENHA = MD5('1234567890');

# REMOO DE TABELAS E VISES NO MAIS UTILIZADAS
DROP TABLE IF EXISTS REGISTROSEXCLUIDOS;
DROP VIEW IF EXISTS VIW_ALL_SITUATIONS;

# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_all_equipments AS select equipamentos.IN_EQUIPAMENTOS_ID AS IN_EQUIPAMENTOS_ID,equipamentos.VA_MODELO AS VA_MODELO,equipamentos.FL_LUCROBRUTO AS FL_LUCROBRUTO,equipamentos.FL_VALORUNITARIO AS FL_VALORUNITARIO,equipamentos.TI_MOEDA AS TI_MOEDA,equipamentos.BO_DISPONIVEL AS BO_DISPONIVEL,FNC_GET_FORMATTED_PERCENTUAL(equipamentos.FL_LUCROBRUTO,0) AS LUCROBRUTO,FNC_GET_FORMATTED_CURRENCY_VALUE(equipamentos.FL_VALORUNITARIO,FNC_GET_CURRENCY_SYMBOL(equipamentos.TI_MOEDA),0) AS VALORUNITARIO,FNC_BOOLEAN_TO_STRING(equipamentos.BO_DISPONIVEL) AS DISPONIVEL from equipamentos order by equipamentos.VA_MODELO;
DROP VIEW IF EXISTS viw_all_equipments;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_all_proposals AS select pro.IN_PROPOSTAS_ID AS IN_PROPOSTAS_ID,pro.IN_OBRAS_ID AS IN_OBRAS_ID,FNC_GET_PROPOSAL_CODE(pro.IN_PROPOSTAS_ID) AS CODIGO,obr.VA_NOMEDAOBRA AS VA_NOMEDAOBRA,ins.VA_NOME AS INSTALADOR,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_PROPOSAL_VALUE(pro.IN_PROPOSTAS_ID,1,1,NULL),pro.VA_MOEDA,0) AS SUBTOTAL,FNC_GET_FORMATTED_PROPOSAL_REAJUST(pro.IN_PROPOSTAS_ID) AS REAJUSTE,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_PROPOSAL_VALUE(pro.IN_PROPOSTAS_ID,0,1,NULL),pro.VA_MOEDA,0) AS TOTAL,FNC_BOOLEAN_TO_STRING(pro.BO_PROPOSTAPADRAO) AS PADRAO from ((propostas PRO join instaladores INS on((pro.SM_INSTALADORES_ID = ins.SM_INSTALADORES_ID))) join obras OBR on((pro.IN_OBRAS_ID = obr.IN_OBRAS_ID)));
DROP VIEW IF EXISTS viw_all_proposals;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_all_users AS select usuarios.SM_USUARIOS_ID AS SM_USUARIOS_ID,usuarios.VA_NOME AS VA_NOME,usuarios.VA_LOGIN AS VA_LOGIN,usuarios.TB_SENHA AS TB_SENHA,date_format(usuarios.DT_DATAEHORADACRIACAO,_latin1'%d/%m/%Y @ %h:%i:%s') AS DATAEHORADOCADASTRO from usuarios order by usuarios.VA_NOME;
DROP VIEW IF EXISTS viw_all_users;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_all_works AS select obr.IN_OBRAS_ID AS IN_OBRAS_ID,obr.VA_NOMEDAOBRA AS VA_NOMEDAOBRA,obr.DT_DATAEHORADACRIACAO AS DT_DATAEHORADACRIACAO,concat(obr.VA_CIDADE,_latin1' / ',obr.CH_ESTADO) AS LOCALIDADE,reg.VA_REGIAO AS VA_REGIAO,date_format(obr.DT_DATAEHORADACRIACAO,_latin1'%d/%m/%Y') AS DATA_DE_ENTRADA,sit.VA_DESCRICAO AS VA_DESCRICAO,FNC_GET_WORK_VALUE(obr.IN_OBRAS_ID,1,NULL) AS `FNC_GET_WORK_VALUE(OBR.IN_OBRAS_ID,TRUE,NULL)` from ((obras OBR join regioes REG on((obr.TI_REGIOES_ID = reg.TI_REGIOES_ID))) join situacoes SIT on((obr.TI_SITUACOES_ID = sit.TI_SITUACOES_ID)));
DROP VIEW IF EXISTS viw_all_works;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_entities_from_system AS select entidadesdosistema.IN_ENTIDADESDOSISTEMA_ID AS IN_ENTIDADESDOSISTEMA_ID,entidadesdosistema.VA_NOME AS VA_NOME,entidadesdosistema.TI_TIPO AS TI_TIPO,FNC_GET_TRANSLATED_ENTITY_TYPE(entidadesdosistema.TI_TIPO) AS TIPO from entidadesdosistema;
DROP VIEW IF EXISTS viw_entities_from_system;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_equipments_from_item AS select edi.IN_EQUIPAMENTOSDOSITENS_ID AS IN_EQUIPAMENTOSDOSITENS_ID,edi.IN_ITENS_ID AS IN_ITENS_ID,edi.IN_EQUIPAMENTOS_ID AS IN_EQUIPAMENTOS_ID,edi.FL_LUCROBRUTO AS FL_LUCROBRUTO,edi.FL_VALORUNITARIO AS FL_VALORUNITARIO,edi.TI_MOEDA AS TI_MOEDA,eqp.VA_MODELO AS MODELO,FNC_GET_FORMATTED_CURRENCY_VALUE((FNC_GET_ICMS_MULTIPLIER(obr.IN_OBRAS_ID) * edi.FL_VALORUNITARIO),FNC_GET_CURRENCY_SYMBOL(edi.TI_MOEDA),0) AS VALORCOMIMPOSTOS,FNC_GET_FORMATTED_PERCENTUAL(edi.FL_LUCROBRUTO,0) AS LUCROBRUTO from ((((equipamentosdositens EDI join equipamentos EQP on((edi.IN_EQUIPAMENTOS_ID = eqp.IN_EQUIPAMENTOS_ID))) join itens ITE on((edi.IN_ITENS_ID = ite.IN_ITENS_ID))) join propostas PRO on((ite.IN_PROPOSTAS_ID = pro.IN_PROPOSTAS_ID))) join obras OBR on((pro.IN_OBRAS_ID = obr.IN_OBRAS_ID)));
DROP VIEW IF EXISTS viw_equipments_from_item;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_groups_from_users AS select gdu.MI_GRUPOSDOSUSUARIOS_ID AS MI_GRUPOSDOSUSUARIOS_ID,gdu.TI_GRUPOS_ID AS TI_GRUPOS_ID,gdu.SM_USUARIOS_ID AS SM_USUARIOS_ID,gru.VA_NOME AS VA_NOME from (gruposdosusuarios GDU join grupos GRU on((gdu.TI_GRUPOS_ID = gru.TI_GRUPOS_ID)));
DROP VIEW IF EXISTS viw_groups_from_users;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_items_from_proposal AS select ite.IN_ITENS_ID AS IN_ITENS_ID,ite.IN_PROPOSTAS_ID AS IN_PROPOSTAS_ID,ite.TI_FAMILIAS_ID AS TI_FAMILIAS_ID,ite.VA_DESCRICAO AS VA_DESCRICAO,ite.FL_CAPACIDADE AS FL_CAPACIDADE,ite.TI_UNIDADES_ID AS TI_UNIDADES_ID,ite.SM_QUANTIDADE AS SM_QUANTIDADE,ite.EN_VOLTAGEM AS EN_VOLTAGEM,ite.FL_DESCONTOPERC AS FL_DESCONTOPERC,ite.TI_ORDEM AS TI_ORDEM,fam.VA_DESCRICAO AS FAMILIA,FNC_GET_BRUTE_PROFIT(ite.IN_ITENS_ID) AS FL_LUCROBRUTO,FNC_GET_FORMATTED_CAPACITY(ite.FL_CAPACIDADE,uni.VA_ABREVIATURA) AS CAPACIDADE,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_ITEM_VALUE(ite.IN_ITENS_ID,1,0,NULL),FNC_GET_CURRENCY_SYMBOL(FNC_GET_CURRENCY_CODE(ite.IN_ITENS_ID)),0) AS SUBTOTAL,FNC_GET_FORMATTED_PERCENTUAL(ite.FL_DESCONTOPERC,1) AS REAJUSTE,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_ITEM_VALUE(ite.IN_ITENS_ID,0,0,NULL),FNC_GET_CURRENCY_SYMBOL(FNC_GET_CURRENCY_CODE(ite.IN_ITENS_ID)),0) AS TOTAL,FNC_GET_FORMATTED_PERCENTUAL(FNC_GET_BRUTE_PROFIT(ite.IN_ITENS_ID),0) AS LUCROBRUTO from (((itens ITE join propostas PRO on((ite.IN_PROPOSTAS_ID = pro.IN_PROPOSTAS_ID))) join familias FAM on((ite.TI_FAMILIAS_ID = fam.TI_FAMILIAS_ID))) join unidades UNI on((ite.TI_UNIDADES_ID = uni.TI_UNIDADES_ID))) order by ite.TI_ORDEM;
DROP VIEW IF EXISTS viw_items_from_proposal;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_permissions_from_groups AS select pdg.IN_PERMISSOESDOSGRUPOS_ID AS IN_PERMISSOESDOSGRUPOS_ID,pdg.IN_ENTIDADESDOSISTEMA_ID AS IN_ENTIDADESDOSISTEMA_ID,pdg.TI_GRUPOS_ID AS TI_GRUPOS_ID,pdg.TI_LER AS TI_LER,pdg.TI_INSERIR AS TI_INSERIR,pdg.TI_ALTERAR AS TI_ALTERAR,pdg.TI_EXCLUIR AS TI_EXCLUIR,eds.TI_TIPO AS TI_TIPO,FNC_GET_TRANSLATED_ENTITY_TYPE(eds.TI_TIPO) AS TIPO,eds.VA_NOME AS VA_NOME from (permissoesdosgrupos PDG join entidadesdosistema EDS on((pdg.IN_ENTIDADESDOSISTEMA_ID = eds.IN_ENTIDADESDOSISTEMA_ID)));
DROP VIEW IF EXISTS viw_permissions_from_groups;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_permissions_from_users AS select pdu.IN_PERMISSOESDOSUSUARIOS_ID AS IN_PERMISSOESDOSUSUARIOS_ID,pdu.IN_ENTIDADESDOSISTEMA_ID AS IN_ENTIDADESDOSISTEMA_ID,pdu.SM_USUARIOS_ID AS SM_USUARIOS_ID,pdu.TI_LER AS TI_LER,pdu.TI_INSERIR AS TI_INSERIR,pdu.TI_ALTERAR AS TI_ALTERAR,pdu.TI_EXCLUIR AS TI_EXCLUIR,eds.TI_TIPO AS TI_TIPO,FNC_GET_TRANSLATED_ENTITY_TYPE(eds.TI_TIPO) AS TIPO,eds.VA_NOME AS VA_NOME from (permissoesdosusuarios PDU join entidadesdosistema EDS on((pdu.IN_ENTIDADESDOSISTEMA_ID = eds.IN_ENTIDADESDOSISTEMA_ID)));
DROP VIEW IF EXISTS viw_permissions_from_users;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_proposals_from_work AS select pro.IN_PROPOSTAS_ID AS IN_PROPOSTAS_ID,pro.IN_OBRAS_ID AS IN_OBRAS_ID,pro.SM_INSTALADORES_ID AS SM_INSTALADORES_ID,pro.VA_CONTATO AS VA_CONTATO,pro.BO_PROPOSTAPADRAO AS BO_PROPOSTAPADRAO,pro.FL_DESCONTOPERC AS FL_DESCONTOPERC,pro.FL_DESCONTOVAL AS FL_DESCONTOVAL,pro.VA_MOEDA AS VA_MOEDA,pro.VA_COTACOES AS VA_COTACOES,pro.TI_VALIDADE AS TI_VALIDADE,FNC_GET_PROPOSAL_CODE(pro.IN_PROPOSTAS_ID) AS CODIGO,ins.VA_NOME AS INSTALADOR,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_PROPOSAL_VALUE(pro.IN_PROPOSTAS_ID,1,1,NULL),pro.VA_MOEDA,0) AS SUBTOTAL,FNC_GET_FORMATTED_PROPOSAL_REAJUST(pro.IN_PROPOSTAS_ID) AS REAJUSTE,FNC_GET_FORMATTED_CURRENCY_VALUE(FNC_GET_PROPOSAL_VALUE(pro.IN_PROPOSTAS_ID,0,1,NULL),pro.VA_MOEDA,0) AS TOTAL,date_format(pro.DT_DATAEHORADACRIACAO,_latin1'%d/%m/%Y') AS DATAEHORADACRIACAO from (propostas PRO join instaladores INS on((pro.SM_INSTALADORES_ID = ins.SM_INSTALADORES_ID)));
DROP VIEW IF EXISTS viw_proposals_from_work;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_regions_from_users AS select rdu.MI_REGIOESDOSUSUARIOS_ID AS MI_REGIOESDOSUSUARIOS_ID,rdu.TI_REGIOES_ID AS TI_REGIOES_ID,rdu.SM_USUARIOS_ID AS SM_USUARIOS_ID,reg.VA_REGIAO AS VA_REGIAO from (regioesdosusuarios RDU join regioes REG on((rdu.TI_REGIOES_ID = reg.TI_REGIOES_ID)));
DROP VIEW IF EXISTS viw_regions_from_users;
# CREATE ALGORITHM=UNDEFINED DEFINER=root@localhost SQL SECURITY DEFINER VIEW viw_selected_work AS select obras.IN_OBRAS_ID AS IN_OBRAS_ID,obras.TI_REGIOES_ID AS TI_REGIOES_ID,obras.VA_NOMEDAOBRA AS VA_NOMEDAOBRA,obras.VA_CIDADE AS VA_CIDADE,obras.CH_ESTADO AS CH_ESTADO,obras.TI_SITUACOES_ID AS TI_SITUACOES_ID,obras.VA_PRAZODEENTREGA AS VA_PRAZODEENTREGA,obras.TX_CONDICAODEPAGAMENTO AS TX_CONDICAODEPAGAMENTO,obras.FL_ICMS AS FL_ICMS,obras.EN_FRETE AS EN_FRETE,obras.TX_CONDICOESGERAIS AS TX_CONDICOESGERAIS,obras.TX_OBSERVACOES AS TX_OBSERVACOES,obras.VA_CONSTRUTORA AS VA_CONSTRUTORA,obras.TI_TIPOS_ID AS TI_TIPOS_ID,obras.SM_PROJETISTAS_ID AS SM_PROJETISTAS_ID,obras.DA_DATADEEXPIRACAO AS DA_DATADEEXPIRACAO,date_format(obras.DT_DATAEHORADACRIACAO,_latin1'%d/%m/%Y') AS DATAEHORADACRIACAO from obras;
DROP VIEW IF EXISTS viw_selected_work;

# ------------------------------------------------------------------------------

# CRIAR UMA NOVA COLUNA NA TABELA "EQUIPAMENTOS" PARA ARMAZENAR O IPI DE CADA EQUIPAMENTO
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'EQUIPAMENTOS'
     AND UPPER(COL.COLUMN_NAME) = 'FL_IPI';

  IF CONDICAO THEN
    ALTER TABLE EQUIPAMENTOS
     DROP FL_IPI;
  END IF;

  ALTER TABLE EQUIPAMENTOS
    ADD COLUMN FL_IPI FLOAT(12,4) NOT NULL AFTER FL_LUCROBRUTO;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;

# ------------------------------------------------------------------------------

# CRIAR UMA NOVA COLUNA NA TABELA "USUARIOS" PARA ARMAZENAR O E-MAIL DE UM
# USUÁRIO TAMBÉM SERÁ CRIADO UM INDICE UNICO PARA ESTE CAMPO
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'USUARIOS'
     AND UPPER(COL.COLUMN_NAME) = 'VA_EMAIL';

  IF CONDICAO THEN
    ALTER TABLE USUARIOS
     DROP VA_EMAIL;
  END IF;

  ALTER TABLE USUARIOS
    ADD COLUMN VA_EMAIL VARCHAR(64) DEFAULT NULL AFTER TB_SENHA,
    ADD UNIQUE INDEX USU_VA_EMAIL_UI(VA_EMAIL);

END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;

# ------------------------------------------------------------------------------
# CRIAR UMA NOVA COLUNAS NA TABELA "OBRAS" PARA GUARDAR O ID DO USUÁRIO QUE FEZ
# A JUSTIFICATIVA
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS TCO
   WHERE UPPER(TCO.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(TCO.TABLE_NAME) = 'OBRAS'
     AND UPPER(TCO.CONSTRAINT_NAME) = 'USU_OBR_FK';

  IF CONDICAO THEN
    ALTER TABLE OBRAS
     DROP FOREIGN KEY USU_OBR_FK;
  END IF;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'OBRAS'
     AND UPPER(COL.COLUMN_NAME) = 'SM_USUARIOJUSTIFICADOR_ID';

  IF CONDICAO THEN
    ALTER TABLE OBRAS
     DROP SM_USUARIOJUSTIFICADOR_ID;
  END IF;

  ALTER TABLE OBRAS
    ADD COLUMN SM_USUARIOJUSTIFICADOR_ID SMALLINT DEFAULT NULL AFTER TX_OBSERVACOES,
    ADD CONSTRAINT USU_OBR_FK FOREIGN KEY USU_OBR_FK (SM_USUARIOJUSTIFICADOR_ID)
        REFERENCES USUARIOS (SM_USUARIOS_ID)
        ON DELETE RESTRICT
        ON UPDATE CASCADE;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------

# ------------------------------------------------------------------------------
# CRIAR DUAS NOVAS COLUNAS NA TABELA "OBRAS" PARA GUARDAR MÊS E ANO DE ENTREGA
# PROVÁVEL DA OBRA
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'OBRAS'
     AND UPPER(COL.COLUMN_NAME) = 'YR_ANOPROVAVELDEENTREGA';

  IF CONDICAO THEN
    ALTER TABLE OBRAS
     DROP YR_ANOPROVAVELDEENTREGA;
  END IF;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'OBRAS'
     AND UPPER(COL.COLUMN_NAME) = 'TI_MESPROVAVELDEENTREGA';

  IF CONDICAO THEN
    ALTER TABLE OBRAS
     DROP TI_MESPROVAVELDEENTREGA;
  END IF;

  ALTER TABLE OBRAS
    ADD COLUMN YR_ANOPROVAVELDEENTREGA YEAR(4) NOT NULL AFTER VA_PRAZODEENTREGA,
    ADD COLUMN TI_MESPROVAVELDEENTREGA TINYINT UNSIGNED NOT NULL AFTER YR_ANOPROVAVELDEENTREGA;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------

# ATUALIZANDO A OBRA PARA QUE OS VALORES DOS CAMPOS CRIADOS ACIMA TENHAM ALGUM
# SENTIDO
UPDATE OBRAS
   SET YR_ANOPROVAVELDEENTREGA = YEAR(DT_DATAEHORADACRIACAO)
     , TI_MESPROVAVELDEENTREGA = MONTH(DT_DATAEHORADACRIACAO);
     
# ------------------------------------------------------------------------------
# CRIAR UMA NOVA COLUNA NA TABELA "SITUACOES" PARA GUARDAR A QUANTIDADE DE DIAS
# PARA EXPIRAO DE UMA SITUAO EXPIRVEL
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'SITUACOES'
     AND UPPER(COL.COLUMN_NAME) = 'TI_DIASPARAEXPIRACAO';

  IF CONDICAO THEN
    ALTER TABLE SITUACOES
     DROP TI_DIASPARAEXPIRACAO;
  END IF;

  ALTER TABLE SITUACOES
    ADD COLUMN TI_DIASPARAEXPIRACAO TINYINT UNSIGNED NOT NULL DEFAULT 0 AFTER BO_EXPIRAVEL;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------

# COLOCANDO A QUANTIDADE PADRÃO DE DIAS PARA EXPIRAÇÃO EM TODAS AS SITUAÇÕES
# EXPIRÁVEIS
UPDATE SITUACOES
   SET TI_DIASPARAEXPIRACAO = 30
 WHERE BO_EXPIRAVEL;

# ------------------------------------------------------------------------------
# CRIAR UMA NOVA COLUNA NA TABELA "SITUACOES" PARA INDICAR SE A SITUAÇÃO
# NECESSITA DE UMA JUSTIFICATIVA
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'SITUACOES'
     AND UPPER(COL.COLUMN_NAME) = 'BO_JUSTIFICAVEL';

  IF CONDICAO THEN
    ALTER TABLE SITUACOES
     DROP BO_JUSTIFICAVEL;
  END IF;

  ALTER TABLE SITUACOES
    ADD COLUMN BO_JUSTIFICAVEL BOOLEAN NOT NULL DEFAULT FALSE AFTER BO_EXPIRAVEL;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------

# COLOCANDO O VALOR CORRETO PARA A COLUNA "BO_JUSTIFICAVEL"
UPDATE SITUACOES
   SET BO_JUSTIFICAVEL = IF(UPPER(VA_DESCRICAO) = UPPER('PERDIDA'),TRUE,FALSE);

# ATUALIZANDO TODAS AS JUSTIFICATIVAS DE TODAS AS OBRAS INICIALMENTE
UPDATE OBRAS
   SET SM_USUARIOJUSTIFICADOR_ID = 1
 WHERE TI_SITUACOES_ID IN (SELECT TI_SITUACOES_ID
                             FROM SITUACOES
                            WHERE BO_JUSTIFICAVEL);

# ------------------------------------------------------------------------------
# A COLUNA SM_USUARIO_ID NO SER MAIS NECESSRIA NO DELTA, VISTO QUE ESTA
# INFORMAO EST SENDO ADICIONADA REGISTRO A REGISTRO AUTOMATICAMENTE
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'DELTA'
     AND UPPER(COL.COLUMN_NAME) = 'SM_USUARIO_ID';

  IF CONDICAO THEN
    ALTER TABLE DELTA
     DROP SM_USUARIO_ID;
  END IF;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------

# O CAMPO DT_DATAEHORADAACAO DA TABELA DELTA NÃO PODE SER "NOT NULL" A INSTRUÇÃO
# A SEGUIR RETIRA O ATRIBUTO "NOT NULL" DA COLUNA
  ALTER TABLE DELTA
MODIFY COLUMN DT_DATAEHORADAACAO DATETIME DEFAULT NULL;

# HÁ UM PROBLEMA DE SINCRONIZAÇÃO ONDE PARA CADA TABELA DE LIGAÇÃO, A COLUNA
# DT_DATAEHORADAACAO, NO SERVIDOR, NÃO ESTÁ SENDO PREENCHIDA. DEVEMOS EXECUTAR
# O SEGUINTE COMANDO PARA CORRIGIR O DELTA NO SERVIDOR
UPDATE DELTA
   SET DT_DATAEHORADAACAO = 00000000000000
 WHERE DT_DATAEHORADAACAO IS NULL;

# TODOS OS CAMPOS COM DADOS DE PONTO FLUTUANTE FORAM LIMITADOS QUANTO ÀS SUAS
# CASAS DECIMAIS DE FORMA QUE ESTES TENHAM SEMPRE 4 CASAS DECIMAIS
  ALTER TABLE EQUIPAMENTOS
MODIFY COLUMN FL_LUCROBRUTO FLOAT(12,4) NOT NULL;

  ALTER TABLE EQUIPAMENTOSDOSITENS
MODIFY COLUMN FL_LUCROBRUTO FLOAT(12,4) NOT NULL;

  ALTER TABLE ICMS
MODIFY COLUMN FL_VALOR FLOAT(12,4) UNSIGNED NOT NULL;

  ALTER TABLE ITENS
MODIFY COLUMN FL_CAPACIDADE FLOAT(12,4) NOT NULL,
MODIFY COLUMN FL_DESCONTOPERC FLOAT(12,4) DEFAULT 0;

  ALTER TABLE OBRAS
MODIFY COLUMN FL_ICMS FLOAT(12,4) UNSIGNED NOT NULL;

  ALTER TABLE PROPOSTAS
MODIFY COLUMN FL_DESCONTOPERC FLOAT(12,4) DEFAULT NULL;

# MUITOS REGISTROS DA TABELA ITENS ESTAVAM COM A COLUNA "EN_VOLTAGEM" CONFIGURADA
# COMO NULL, QUE PARA UM CAMPO ENUM É UMA STRING VAZIA. COMO NÃO HÁ MEIOS DE SE
# SABER QUAIS AS REAIS VOLTAGENS RESOLVI CONFIGURAR TODAS COMO 'N/A', O QUE É
# ACEITAVEL POR ENQUANTO
UPDATE ITENS
   SET EN_VOLTAGEM = 'N/A'
 WHERE EN_VOLTAGEM = '';

# AGORA O QUE IDENTIFICA SE UMA OBRA NÃO EXPIRA É SE ELA TEM A DATA MÍNIMA DO
# SISTEMA, QUE É CONHECIDA E NO DELPHI É ZERO. NO BANCO ELA É SETADA COMO NULL 
UPDATE OBRAS
   SET DA_DATADEEXPIRACAO = NULL
 WHERE DA_DATADEEXPIRACAO = 99991231;

# ONDE HOUVER DATA DE EXPIRAÇÃO IGUAL A ZERO DEVEMOS ALTERAR PARA NULL
UPDATE OBRAS
   SET DA_DATADEEXPIRACAO = NULL
 WHERE DA_DATADEEXPIRACAO = 00000000;

# ALGUMAS OBRAS ESTAVAM COM SITUAÇÕES EXPIRÁVEIS MAS SEM DATA DE EXPIRAÇÃO, O
# QUE ESTÁ INCORRETO.
UPDATE OBRAS OBR
     , SITUACOES SIT
   SET OBR.DA_DATADEEXPIRACAO = ADDDATE(CURDATE(), SIT.TI_DIASPARAEXPIRACAO)
 WHERE OBR.TI_SITUACOES_ID = SIT.TI_SITUACOES_ID
   AND OBR.DA_DATADEEXPIRACAO IS NULL
   AND SIT.BO_EXPIRAVEL;
   
# ------------------------------------------------------------------------------
# NÃO APRENDI A MANIPULAR CERTOS TIPOS DE STRING NO MYSQL POR ISSO AS
# REFERÊNCIAS A MOEDA ESTÃO SENDO ALTERADAS PARA INTEIROS. O PROGRAMA SE
# ENCARREGARÁ DE FAZER A CONVERSÃO DEVIDA E MOSTRARÁ A MOEDA CORRESPONDENTE
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN
  DECLARE CONDICAO BOOLEAN;

  SELECT COUNT(*)
    INTO CONDICAO
    FROM INFORMATION_SCHEMA.COLUMNS COL
   WHERE UPPER(COL.TABLE_SCHEMA) = @BANCODEDADOS
     AND UPPER(COL.TABLE_NAME) = 'PROPOSTAS'
     AND UPPER(COL.COLUMN_NAME) = 'VA_MOEDA';

  IF CONDICAO THEN
    UPDATE PROPOSTAS
       SET VA_MOEDA = FIELD(VA_MOEDA,'US$','E','R$','L','Y');

    ALTER TABLE PROPOSTAS CHANGE COLUMN VA_MOEDA TI_MOEDA TINYINT UNSIGNED NOT NULL DEFAULT 3;
  END IF;
END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------
# O PROCEDURE A SEGUIR RETORNA OS REGISTROS EM EQUIPAMENTOSDOSITENS QUE CONTÉM O
# CAMPO TI_MOEDA PREENCHIDO COM VALORES DISTINTOS PARA UM MESMO ITEM O QUE É
# ILEGAL, POIS TODOS OS EQUIPAMENTOS DE UM ITEM TEM DE SER DE UMA MESMA MOEDA.
# EM SEGUIDA, PARA CADA UM DESTES REGISTROS, CONFIGURA A MOEDA PARA UM VALOR
# UNICO = 3 (R$)
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN

  DECLARE CONCLUIDO BOOLEAN DEFAULT FALSE;
  DECLARE ITEM INTEGER UNSIGNED;
  DECLARE PROBLEMAS CURSOR FOR SELECT IN_ITENS_ID FROM EQUIPAMENTOSDOSITENS GROUP BY IN_ITENS_ID HAVING COUNT(DISTINCT TI_MOEDA) > 1;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET CONCLUIDO = TRUE;

  OPEN PROBLEMAS;

  REPEAT
    FETCH PROBLEMAS INTO ITEM;

    IF NOT CONCLUIDO THEN
      UPDATE EQUIPAMENTOSDOSITENS
         SET TI_MOEDA = 3
       WHERE IN_ITENS_ID = ITEM;
    END IF;
  UNTIL CONCLUIDO END REPEAT;

  CLOSE PROBLEMAS;

END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------
# ALGUMAS OBRAS ESTÃO COM MAIS DE UMA PROPOSTA PADRÃO O QUE NÃO É PERMITIDO.
# ESTE PROCEDURE CONSERTA ISSO
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
DELIMITER ¬
CREATE PROCEDURE CHECK_STRUCTURE()
SQL SECURITY DEFINER
BEGIN

  DECLARE CONCLUIDO BOOLEAN DEFAULT FALSE;
  DECLARE OBRA INTEGER UNSIGNED;
  DECLARE PROBLEMAS CURSOR FOR SELECT IN_OBRAS_ID
                                 FROM PROPOSTAS
                                WHERE BO_PROPOSTAPADRAO
                             GROUP BY IN_OBRAS_ID
                               HAVING COUNT(IN_OBRAS_ID) > 1;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET CONCLUIDO = TRUE;

  OPEN PROBLEMAS;

  REPEAT
    FETCH PROBLEMAS INTO OBRA;

    IF NOT CONCLUIDO THEN
      # COLOCANDO TODAS COMO NÃO PADRÃO
      UPDATE PROPOSTAS
         SET BO_PROPOSTAPADRAO = FALSE
       WHERE IN_OBRAS_ID = OBRA;

      # CONFIGURANDO A PRIMEIRA PROPOSTA DO GRUPO DE PROPOSTAS DA OBRA
      # PROBLEMÁTICA COMO PADRÃO
      CALL PRC_SET_DEFAULT_PROPOSAL_ON_FIRST_NON_DEFAULT_PROPOSAL(OBRA);

    END IF;
  UNTIL CONCLUIDO END REPEAT;

  CLOSE PROBLEMAS;

END; ¬
DELIMITER ;

CALL CHECK_STRUCTURE();
DROP PROCEDURE IF EXISTS CHECK_STRUCTURE;
# ------------------------------------------------------------------------------
# ==============================================================================
SET FOREIGN_KEY_CHECKS = 1;

# A PARTIR DESTE PONTO TODAS AS AÇÕES FARÃO USO DA INTEGRIDADE REFERENCIAL, O
# QUE SIGNIFICA QUE OS DADOS TEM DE ESTAR CORRETOS

# LIMPA O DELTA
TRUNCATE TABLE DELTA;

# TRANSFORMANDO TODOS OS NOMES DOS USUÁRIOS EM MAIÚSCULAS
UPDATE USUARIOS
   SET VA_NOME = UPPER(VA_NOME);
   
# ADICIONANDO OS E-MAIS DOS USUARIOS
UPDATE USUARIOS
   SET VA_EMAIL = 'lenadroazevedo@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('LEANDRO AZEVEDO');

UPDATE USUARIOS
   SET VA_EMAIL = 'josemilton@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('JOSE M. VIEIRA B. JUNIOR');

UPDATE USUARIOS
   SET VA_EMAIL = 'marciosoares@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('MARCIO MENDONÇA');

UPDATE USUARIOS
   SET VA_EMAIL = 'marcelopinheiro@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Marcelo Pinheiro');

UPDATE USUARIOS
   SET VA_EMAIL = 'luizhenrique@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('LUIZ HENRIQUE D''AVILA');

UPDATE USUARIOS
   SET VA_EMAIL = 'taniacarvalho@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('TANIA CARVALHO');

UPDATE USUARIOS
   SET VA_EMAIL = 'monicabonfim@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('MONICA BOMFIM');

UPDATE USUARIOS
   SET VA_EMAIL = 'monicabonfim@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('MONICA BOMFIM');

UPDATE USUARIOS
   SET VA_EMAIL = 'ernanifiuza@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('ERNANI FIUZA');

UPDATE USUARIOS
   SET VA_EMAIL = 'cesarnakahara@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('CESAR NAKAHARA');

UPDATE USUARIOS
   SET VA_EMAIL = 'teruo@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('CARLOS TERUO HAMADA');

UPDATE USUARIOS
   SET VA_EMAIL = 'alexpereira@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('ALEXANDRE PEREIRA');

UPDATE USUARIOS
   SET VA_EMAIL = 'kenjisasada@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Kenji Sasada');

UPDATE USUARIOS
   SET VA_EMAIL = 'carlosleon@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('CARLOS ALBERTO MENDES LEON');

UPDATE USUARIOS
   SET VA_EMAIL = 'rodrigocosta@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('LUIS RODRIGO DE OLIVEIRA COSTA');

UPDATE USUARIOS
   SET VA_EMAIL = 'geomarandrade@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('GEOMAR RIBEIRO ANDRADE');

UPDATE USUARIOS
   SET VA_EMAIL = 'julianafreitas@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('JULIANA SANTOS FREITAS');

UPDATE USUARIOS
   SET VA_EMAIL = 'alinesilva@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('ALINE SILVA');

UPDATE USUARIOS
   SET VA_EMAIL = 'arthurferreira@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('ARTHUR FERREIRA');

UPDATE USUARIOS
   SET VA_EMAIL = 'edsonikaramoto@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('EDSON IKARIMOTO');

UPDATE USUARIOS
   SET VA_EMAIL = 'franclemes@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('FRANCISCO LEMES');

UPDATE USUARIOS
   SET VA_EMAIL = 'marcelocardoso@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('MARCELO CARDOSO');

UPDATE USUARIOS
   SET VA_EMAIL = 'danielmunhao@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('DANIEL MUNHAO');

UPDATE USUARIOS
   SET VA_EMAIL = 'wilsonnista@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('WILSON FERNANDO NISTA GERALDO');

UPDATE USUARIOS
   SET VA_EMAIL = 'miltonschmidt@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('MILTON SCHMIDT');

UPDATE USUARIOS
   SET VA_EMAIL = 'fernandoferreira@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Fernando Ferreira');

UPDATE USUARIOS
   SET VA_EMAIL = 'diogocandido@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Diogo Cândido');

UPDATE USUARIOS
   SET VA_EMAIL = 'valtermatos@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('valter matos');

UPDATE USUARIOS
   SET VA_EMAIL = 'atilaprado@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Átila Prado');

UPDATE USUARIOS
   SET VA_EMAIL = 'fabiolopes@hitachiapb.com.br'
 WHERE UPPER(VA_NOME) = UPPER('Fábio Lopes');

# AS TABELAS A SEGUIR FORAM REVISTAS E POPULADAS COM INFORMAÇÕES PERTINENTES AO
# NOVO BDO
DELETE FROM ENTIDADESDOSISTEMA
 WHERE UPPER(VA_NOME) NOT IN ('DELTA'
                             ,'ENTIDADESDOSISTEMA'
                             ,'EQUIPAMENTOS'
                             ,'EQUIPAMENTOSDOSITENS'
                             ,'FAMILIAS'
                             ,'GRUPOS'
                             ,'GRUPOSDOSUSUARIOS'
                             ,'ICMS'
                             ,'INSTALADORES'
                             ,'ITENS'
                             ,'OBRAS'
                             ,'PERMISSOESDOSGRUPOS'
                             ,'PERMISSOESDOSUSUARIOS'
                             ,'PROJETISTAS'
                             ,'PROPOSTAS'
                             ,'REGIOES'
                             ,'REGIOESDOSUSUARIOS'
                             ,'SEQUENCIAS'
                             ,'SINCRONIZACOES'
                             ,'SITUACOES'
                             ,'TIPOS'
                             ,'UNIDADES'
                             ,'USUARIOS');

# DESFRAGMENTANDO TABELA ENTIDADESDOSISTEMA
ALTER TABLE ENTIDADESDOSISTEMA ENGINE = InnoDB;

INSERT INTO ENTIDADESDOSISTEMA
VALUES (1,'BDODATAMODULE_MAIN.ACTION_SECURITYANDPERMISSIONS',1,1,NOW(),1,NOW(),'INSERIDO')
     , (2,'BDODATAMODULE_MAIN.ACTION_GENERALCONFIGURATIONS',1,1,NOW(),1,NOW(),'INSERIDO');

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_OBRAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_OBRAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_REGIOES',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_REGIOES := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_SITUACOES',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_SITUACOES := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_TIPOSDEOBRA',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TIPOSDEOBRA := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_PROJETISTAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PROJETISTAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_INSTALADORES',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_INSTALADORES := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_EQUIPAMENTOSEFAMILIAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQUIPAMENTOSEFAMILIAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_TABELASAUXILIARES',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TABELASAUXILIARES := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_EQP_LOADDATAFILE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_LOADDATAFILE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_EQP_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_EQP_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_EQP_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_FAM_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_FAM_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_FAM_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_FAM_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_FAM_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_FAM_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_ICM_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ICM_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_ICM_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ICM_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_ICM_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ICM_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_UNI_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_UNI_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_UNI_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_UNI_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_UNI_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_UNI_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_REGIOES.ACTION_REG_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_REG_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_REGIOES.ACTION_REG_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_REG_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_REGIOES.ACTION_REG_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_REG_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_SITUACOES.ACTION_SIT_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_SIT_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_SITUACOES.ACTION_SIT_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_SIT_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_SITUACOES.ACTION_SIT_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_SIT_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TIPOSDEOBRA.ACTION_TIP_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TIP_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TIPOSDEOBRA.ACTION_TIP_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TIP_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TIPOSDEOBRA.ACTION_TIP_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TIP_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_PROJETISTAS.ACTION_PRJ_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRJ_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_PROJETISTAS.ACTION_PRJ_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRJ_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_PROJETISTAS.ACTION_PRJ_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRJ_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_INSTALADORES.ACTION_INS_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_INS_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_INSTALADORES.ACTION_INS_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_INS_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_INSTALADORES.ACTION_INS_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_INS_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_USU_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_USU_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_USU_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_USU_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_USU_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_USU_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_GRU_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_GRU_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_GRU_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_GRU_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_GRU_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_GRU_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_GDU_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_GDU_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_GDU_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_GDU_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_EDS_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EDS_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_EDS_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EDS_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDU_PDG_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDU_PDG_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDG_FULL',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDG_FULL := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDG_NONE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDG_NONE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDG_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDG_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDU_FULL',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDU_FULL := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDU_NONE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDU_NONE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_PDU_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PDU_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_RDU_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RDU_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_RDU_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RDU_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_OBR_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_OBR_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_OBR_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_OBR_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_OBR_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_OBR_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_MOVEDOWN',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_MOVEDOWN := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_MOVEUP',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_MOVEUP := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_DEFINIRCOTACOES',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_DEFINIRCOTACOES := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_REPLICAR',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_REPLICAR := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_ITE_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ITE_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_EDI_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EDI_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_EDI_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EDI_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_RELATORIOOBRAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RELATORIOOBRAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_RELATORIOPROPOSTAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RELATORIOPROPOSTAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_RELATORIOFAMILIAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RELATORIOFAMILIAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_RELATORIOEQUIPAMENTOSPORSITUACAO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RELATORIOEQUIPAMENTOSPORSITUACAO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_GERARPROPOSTA',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_GERARPROPOSTA := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_EQP_RELATORIO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_RELATORIO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_FAM_RELATORIO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_FAM_RELATORIO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_OBR_RELATORIO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_OBR_RELATORIO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_PRO_RELATORIO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRO_RELATORIO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_JUSTIFICATIVA',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_JUSTIFICATIVA := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TIPOSDEOBRA.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_TIP_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_ICM_UNI_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_SITUACOES.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_SIT_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_REGIOES.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_REG_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_PROJETISTAS.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_PRJ_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_INSTALADORES.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_INS_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_EQUIPAMENTOSEFAMILIAS.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EQP_FAM_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_ADMINISTRATION.ACTION_RECORDINFORMATION',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_BDOADMIN_RECORDINFORMATION := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('JUSTIFICATIVAS',0,1,NOW(),1,NOW(),'INSERIDO');
SET @JUSTIFICATIVAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('JUSTIFICATIVASDASOBRAS',0,1,NOW(),1,NOW(),'INSERIDO');
SET @JUSTIFICATIVASDASOBRAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_JUS_INSERT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_JUS_INSERT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_JUS_DELETE',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_JUS_DELETE := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_TABELASAUXILIARES.ACTION_JUS_EDIT',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_JUS_EDIT := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_RELATORIOJUSTIFICATIVASDASOBRAS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_RELATORIOJUSTIFICATIVASDASOBRAS := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_OBRAS.ACTION_EDI_RELATORIO',1,1,NOW(),1,NOW(),'INSERIDO');
SET @ACTION_EDI_RELATORIO := LAST_INSERT_ID();

INSERT INTO ENTIDADESDOSISTEMA (VA_NOME,TI_TIPO,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES ('BDODATAMODULE_MAIN.ACTION_EMAILSAUTOMATICOS',1,1,NOW(),1,NOW(),'INSERIDO');
SET @BDODATAMODULE_MAIN_ACTION_EMAILSAUTOMATICOS := LAST_INSERT_ID();

# DESFRAGMENTANDO TABELA PERMISSOESDOSGRUPOS
ALTER TABLE PERMISSOESDOSGRUPOS ENGINE = InnoDB;

INSERT INTO PERMISSOESDOSGRUPOS (IN_ENTIDADESDOSISTEMA_ID,TI_GRUPOS_ID,TI_LER,TI_INSERIR,TI_ALTERAR,TI_EXCLUIR,SM_USUARIOCRIADOR_ID,DT_DATAEHORADACRIACAO,SM_USUARIOMODIFICADOR_ID,DT_DATAEHORADAMODIFICACAO,EN_SITUACAO)
VALUES (001,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (002,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@JUSTIFICATIVAS,1,1,1,1,1,1,NOW(),1,NOW(),'INSERIDO')
     , (@JUSTIFICATIVASDASOBRAS,1,1,1,1,1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_OBRAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_REGIOES,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_SITUACOES,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TIPOSDEOBRA,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PROJETISTAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_INSTALADORES,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQUIPAMENTOSEFAMILIAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TABELASAUXILIARES,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_LOADDATAFILE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_FAM_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_FAM_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_FAM_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ICM_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ICM_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ICM_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_UNI_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_UNI_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_UNI_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_REG_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_REG_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_REG_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_SIT_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_SIT_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_SIT_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TIP_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TIP_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TIP_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRJ_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRJ_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRJ_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_INS_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_INS_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_INS_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_USU_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_USU_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_USU_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_GRU_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_GRU_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_GRU_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_GDU_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_GDU_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EDS_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EDS_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDU_PDG_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDG_FULL,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDG_NONE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDG_DELETE    ,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDU_FULL,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDU_NONE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PDU_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RDU_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RDU_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_OBR_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_OBR_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_OBR_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_MOVEDOWN,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_MOVEUP,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_DEFINIRCOTACOES,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_REPLICAR,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ITE_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EDI_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EDI_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RELATORIOOBRAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RELATORIOPROPOSTAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RELATORIOFAMILIAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RELATORIOEQUIPAMENTOSPORSITUACAO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_GERARPROPOSTA,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_RELATORIO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_FAM_RELATORIO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_OBR_RELATORIO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_PRO_RELATORIO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_JUSTIFICATIVA,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_TIP_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_ICM_UNI_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_SIT_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_REG_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_INS_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EQP_FAM_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_BDOADMIN_RECORDINFORMATION,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_JUS_INSERT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_JUS_DELETE,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_JUS_EDIT,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_RELATORIOJUSTIFICATIVASDASOBRAS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@ACTION_EDI_RELATORIO,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
     , (@BDODATAMODULE_MAIN_ACTION_EMAILSAUTOMATICOS,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
#     , (120,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
#     , (120,1,1,-1,-1,-1,1,NOW(),1,NOW(),'INSERIDO')
;

# REMOVENDO REGISTROS DESNECESSÁRIOS
DELETE FROM GRUPOS
 WHERE UPPER(VA_NOME) <> 'ADMINISTRADORES';

# LIMPANDO TABELAS CUJOS DADOS ESTÃO DESATUALIZADOS E SERÃO REINSERIDOS
TRUNCATE PERMISSOESDOSUSUARIOS;
TRUNCATE DELTA;

# DESFRAGMENTANDO TABELA PERMISSOESDOSUSUARIOS
OPTIMIZE TABLE PERMISSOESDOSUSUARIOS;

# DESFRAGMENTANDO TABELA DELTA
OPTIMIZE TABLE DELTA;