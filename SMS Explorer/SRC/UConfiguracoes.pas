unit UConfiguracoes;

interface

uses
  Classes, SysUtils, IniFiles, Forms, Windows;

const
  csGENERALSection = 'GENERAL';
  csIMAGEFILESection = 'IMAGEFILE';
  csATCOMMANDSSection = 'ATCOMMANDS';
  csDATABASESection = 'DATABASE';
  csSQLCOMMANDSSection = 'SQLCOMMANDS';

  {Section: GENERAL}
  csGENERALGECFREIN = 'GECFREIN';
  csGENERALGECFCOPO = 'GECFCOPO';
  csGENERALGECFBARA = 'GECFBARA';
  csGENERALGECFDABI = 'GECFDABI';
  csGENERALGECFFLCO = 'GECFFLCO';
  csGENERALGECFPARI = 'GECFPARI';
  csGENERALGECFSTBI = 'GECFSTBI';
  csGENERALGECFDEME = 'GECFDEME';

  {Section: IMAGEFILE}
  csIMAGEFILEIFCFFINA = 'IFCFFINA';

  {Section: ATCOMMANDS}
  csATCOMMANDSATCMREMO = 'ATCMREMO';
  csATCOMMANDSATCMTXFM = 'ATCMTXFM';
  csATCOMMANDSATCMALME = 'ATCMALME';
  csATCOMMANDSATCMRDME = 'ATCMRDME';
  csATCOMMANDSATCMURME = 'ATCMURME';
  csATCOMMANDSATCMSTME = 'ATCMSTME';
  csATCOMMANDSATCMUSME = 'ATCMUSME';
  csATCOMMANDSATCMDEME = 'ATCMDEME';
  csATCOMMANDSATCMSTAR = 'ATCMSTAR';

  {Section: DATABASE}
  csDATABASEDBCFSCNA = 'DBCFSCNA';
  csDATABASEDBCFHONA = 'DBCFHONA';
  csDATABASEDBCFPONU = 'DBCFPONU';
  csDATABASEDBCFUSNA = 'DBCFUSNA';
  csDATABASEDBCFUSPA = 'DBCFUSPA';
  csDATABASEDBCFDBPR = 'DBCFDBPR';

  {Section: SQLCOMMANDS}
  csSQLCOMMANDSSQCFFXPA = 'SQCFFXPA';
  csSQLCOMMANDSSQCFDAFO = 'SQCFDAFO';
  csSQLCOMMANDSSQCFTIFO = 'SQCFTIFO';
  csSQLCOMMANDSSQCFDTFO = 'SQCFDTFO';
  csSQLCOMMANDSSQCMINME = 'SQCMINME';

type
  TConfiguracoes = class(TObject)
  private
    FFileName: string;
    {Section: GENERAL}
    FGENERALGECFREIN: Integer;
    FGENERALGECFCOPO: string;
    FGENERALGECFBARA: Integer;
    FGENERALGECFDABI: Integer;
    FGENERALGECFFLCO: Integer;
    FGENERALGECFPARI: Integer;
    FGENERALGECFSTBI: Integer;
    FGENERALGECFDEME: Boolean;

    {Section: IMAGEFILE}
    FIMAGEFILEIFCFFINA: string;

    {Section: ATCOMMANDS}
    FATCOMMANDSATCMREMO: string;
    FATCOMMANDSATCMTXFM: string;
    FATCOMMANDSATCMALME: string;
    FATCOMMANDSATCMRDME: string;
    FATCOMMANDSATCMURME: string;
    FATCOMMANDSATCMSTME: string;
    FATCOMMANDSATCMUSME: string;
    FATCOMMANDSATCMDEME: string;
    FATCOMMANDSATCMSTAR: string;

    {Section: DATABASE}
    FDATABASEDBCFSCNA: string;
    FDATABASEDBCFHONA: string;
    FDATABASEDBCFPONU: Integer;
    FDATABASEDBCFUSNA: string;
    FDATABASEDBCFUSPA: string;
    FDATABASEDBCFDBPR: string;

    {Section: SQLCOMMANDS}
    FSQLCOMMANDSSQCFFXPA: string;
    FSQLCOMMANDSSQCFDAFO: string;
    FSQLCOMMANDSSQCFTIFO: string;
    FSQLCOMMANDSSQCFDTFO: string;
    FSQLCOMMANDSSQCMINME: string;
  public
    procedure LoadSettings(Ini: TIniFile);
    procedure SaveSettings(Ini: TIniFile);

    procedure LoadFromFile(const FileName: string);
    procedure SaveToFile(const FileName: string); overload;

    procedure SaveToFile; overload;
    constructor Create;
    destructor Destroy; override;

    {Section: GENERAL}
    property GENERALGECFREIN: Integer read FGENERALGECFREIN write FGENERALGECFREIN;
    property GENERALGECFCOPO: string read FGENERALGECFCOPO write FGENERALGECFCOPO;
    property GENERALGECFBARA: Integer read FGENERALGECFBARA write FGENERALGECFBARA;
    property GENERALGECFDABI: Integer read FGENERALGECFDABI write FGENERALGECFDABI;
    property GENERALGECFFLCO: Integer read FGENERALGECFFLCO write FGENERALGECFFLCO;
    property GENERALGECFPARI: Integer read FGENERALGECFPARI write FGENERALGECFPARI;
    property GENERALGECFSTBI: Integer read FGENERALGECFSTBI write FGENERALGECFSTBI;
    property GENERALGECFDEME: Boolean read FGENERALGECFDEME write FGENERALGECFDEME;

    {Section: IMAGEFILE}
    property IMAGEFILEIFCFFINA: string read FIMAGEFILEIFCFFINA write FIMAGEFILEIFCFFINA;

    {Section: ATCOMMANDS}
    property ATCOMMANDSATCMREMO: string read FATCOMMANDSATCMREMO write FATCOMMANDSATCMREMO;
    property ATCOMMANDSATCMTXFM: string read FATCOMMANDSATCMTXFM write FATCOMMANDSATCMTXFM;
    property ATCOMMANDSATCMALME: string read FATCOMMANDSATCMALME write FATCOMMANDSATCMALME;
    property ATCOMMANDSATCMRDME: string read FATCOMMANDSATCMRDME write FATCOMMANDSATCMRDME;
    property ATCOMMANDSATCMURME: string read FATCOMMANDSATCMURME write FATCOMMANDSATCMURME;
    property ATCOMMANDSATCMSTME: string read FATCOMMANDSATCMSTME write FATCOMMANDSATCMSTME;
    property ATCOMMANDSATCMUSME: string read FATCOMMANDSATCMUSME write FATCOMMANDSATCMUSME;
    property ATCOMMANDSATCMDEME: string read FATCOMMANDSATCMDEME write FATCOMMANDSATCMDEME;
    property ATCOMMANDSATCMSTAR: string read FATCOMMANDSATCMSTAR write FATCOMMANDSATCMSTAR;

    {Section: DATABASE}
    property DATABASEDBCFSCNA: string read FDATABASEDBCFSCNA write FDATABASEDBCFSCNA;
    property DATABASEDBCFHONA: string read FDATABASEDBCFHONA write FDATABASEDBCFHONA;
    property DATABASEDBCFPONU: Integer read FDATABASEDBCFPONU write FDATABASEDBCFPONU;
    property DATABASEDBCFUSNA: string read FDATABASEDBCFUSNA write FDATABASEDBCFUSNA;
    property DATABASEDBCFUSPA: string read FDATABASEDBCFUSPA write FDATABASEDBCFUSPA;
    property DATABASEDBCFDBPR: string read FDATABASEDBCFDBPR write FDATABASEDBCFDBPR;

    {Section: SQLCOMMANDS}
    property SQLCOMMANDSSQCFFXPA: string read FSQLCOMMANDSSQCFFXPA write FSQLCOMMANDSSQCFFXPA;
    property SQLCOMMANDSSQCFDAFO: string read FSQLCOMMANDSSQCFDAFO write FSQLCOMMANDSSQCFDAFO;
    property SQLCOMMANDSSQCFTIFO: string read FSQLCOMMANDSSQCFTIFO write FSQLCOMMANDSSQCFTIFO;
    property SQLCOMMANDSSQCFDTFO: string read FSQLCOMMANDSSQCFDTFO write FSQLCOMMANDSSQCFDTFO;
    property SQLCOMMANDSSQCMINME: string read FSQLCOMMANDSSQCMINME write FSQLCOMMANDSSQCMINME;
  end;

var
  Configuracoes: TConfiguracoes = nil;

implementation

constructor TConfiguracoes.Create;
begin
  FFileName := GetCurrentDir + '\SMSExplorer.ini';
  LoadFromFile(FFileName);
end;

destructor TConfiguracoes.Destroy;
begin
  SaveToFile(FFileName);
  inherited;
end;

procedure TConfiguracoes.SaveToFile;
begin
  SaveToFile(FFileName);
end;

procedure TConfiguracoes.LoadSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    {Section: GENERAL}
    FGENERALGECFREIN := Ini.ReadInteger(csGENERALSection, csGENERALGECFREIN, 1);
    FGENERALGECFCOPO := Ini.ReadString(csGENERALSection, csGENERALGECFCOPO, 'COM4');
    FGENERALGECFBARA := Ini.ReadInteger(csGENERALSection, csGENERALGECFBARA, 4); // br1200
    FGENERALGECFDABI := Ini.ReadInteger(csGENERALSection, csGENERALGECFDABI, 3); // dbEight
    FGENERALGECFFLCO := Ini.ReadInteger(csGENERALSection, csGENERALGECFFLCO, 0); // fcHardware
    FGENERALGECFPARI := Ini.ReadInteger(csGENERALSection, csGENERALGECFPARI, 0); // prNone
    FGENERALGECFSTBI := Ini.ReadInteger(csGENERALSection, csGENERALGECFSTBI, 0); // sbOneStopBit
    FGENERALGECFDEME := Ini.ReadBool(csGENERALSection, csGENERALGECFDEME, True);

    {Section: IMAGEFILE}
    FIMAGEFILEIFCFFINA := Ini.ReadString(csIMAGEFILESection, csIMAGEFILEIFCFFINA, 'SMSEXPLORER.CSV');

    {Section: ATCOMMANDS}
    FATCOMMANDSATCMREMO := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMREMO, 'ATZ');
    FATCOMMANDSATCMTXFM := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMTXFM, 'AT+CMGF=1');
    FATCOMMANDSATCMALME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMALME, 'AT+CMGL="ALL"');
    FATCOMMANDSATCMRDME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMRDME, 'AT+CMGL="REC READ"');
    FATCOMMANDSATCMURME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMURME, 'AT+CMGL="REC UNREAD"');
    FATCOMMANDSATCMSTME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMSTME, 'AT+CMGL="STO SENT"');
    FATCOMMANDSATCMUSME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMUSME, 'AT+CMGL="STO UNSENT"');
    FATCOMMANDSATCMDEME := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMDEME, 'AT+CMGD=<:IXMS:>,0');
    FATCOMMANDSATCMSTAR := Ini.ReadString(csATCOMMANDSSection, csATCOMMANDSATCMSTAR, 'AT+CPMS="ME","ME","ME"');

    {Section: DATABASE}
    FDATABASEDBCFSCNA := Ini.ReadString(csDATABASESection, csDATABASEDBCFSCNA, 'TEST');
    FDATABASEDBCFHONA := Ini.ReadString(csDATABASESection, csDATABASEDBCFHONA, '127.0.0.1');
    FDATABASEDBCFPONU := Ini.ReadInteger(csDATABASESection, csDATABASEDBCFPONU, 3306);
    FDATABASEDBCFUSNA := Ini.ReadString(csDATABASESection, csDATABASEDBCFUSNA, 'root');
    FDATABASEDBCFUSPA := Ini.ReadString(csDATABASESection, csDATABASEDBCFUSPA, '123456');
    FDATABASEDBCFDBPR := Ini.ReadString(csDATABASESection, csDATABASEDBCFDBPR, 'mysql-5');

    {Section: SQLCOMMANDS}
    FSQLCOMMANDSSQCFFXPA := Ini.ReadString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFFXPA, '1');
    FSQLCOMMANDSSQCFDAFO := Ini.ReadString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFDAFO, 'YYYY-MM-DD');
    FSQLCOMMANDSSQCFTIFO := Ini.ReadString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFTIFO, 'HH:NN:SS');
    FSQLCOMMANDSSQCFDTFO := Ini.ReadString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFDTFO, 'YYYY-MM-DD HH:NN:SS');
    FSQLCOMMANDSSQCMINME := Ini.ReadString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCMINME, 'INSERT INTO MENSAGENS (MEN_DE, MEN_TEXTO, MEN_ORIGEM, MEN_STATUS, MEN_PAI_ID) VALUES (''<:SDNU:>'', ''<:MECO:>'', ''SMS'', ''NOVA'', <:FXP0:>)');
  end;
end;

procedure TConfiguracoes.SaveSettings(Ini: TIniFile);
begin
  if Ini <> nil then
  begin
    {Section: GENERAL}
    Ini.WriteInteger(csGENERALSection, csGENERALGECFREIN, FGENERALGECFREIN);
    Ini.WriteString(csGENERALSection, csGENERALGECFCOPO, FGENERALGECFCOPO);
    Ini.WriteInteger(csGENERALSection, csGENERALGECFBARA, FGENERALGECFBARA);
    Ini.WriteInteger(csGENERALSection, csGENERALGECFDABI, FGENERALGECFDABI);
    Ini.WriteInteger(csGENERALSection, csGENERALGECFFLCO, FGENERALGECFFLCO);
    Ini.WriteInteger(csGENERALSection, csGENERALGECFPARI, FGENERALGECFPARI);
    Ini.WriteInteger(csGENERALSection, csGENERALGECFSTBI, FGENERALGECFSTBI);
    Ini.WriteBool(csGENERALSection, csGENERALGECFDEME, FGENERALGECFDEME);

    {Section: IMAGEFILE}
    Ini.WriteString(csIMAGEFILESection, csIMAGEFILEIFCFFINA, FIMAGEFILEIFCFFINA);

    {Section: ATCOMMANDS}
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMREMO, FATCOMMANDSATCMREMO);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMTXFM, FATCOMMANDSATCMTXFM);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMALME, FATCOMMANDSATCMALME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMRDME, FATCOMMANDSATCMRDME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMURME, FATCOMMANDSATCMURME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMSTME, FATCOMMANDSATCMSTME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMUSME, FATCOMMANDSATCMUSME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMDEME, FATCOMMANDSATCMDEME);
    Ini.WriteString(csATCOMMANDSSection, csATCOMMANDSATCMSTAR, FATCOMMANDSATCMSTAR);

    {Section: DATABASE}
    Ini.WriteString(csDATABASESection, csDATABASEDBCFSCNA, FDATABASEDBCFSCNA);
    Ini.WriteString(csDATABASESection, csDATABASEDBCFHONA, FDATABASEDBCFHONA);
    Ini.WriteInteger(csDATABASESection, csDATABASEDBCFPONU, FDATABASEDBCFPONU);
    Ini.WriteString(csDATABASESection, csDATABASEDBCFUSNA, FDATABASEDBCFUSNA);
    Ini.WriteString(csDATABASESection, csDATABASEDBCFUSPA, FDATABASEDBCFUSPA);
    Ini.WriteString(csDATABASESection, csDATABASEDBCFDBPR, FDATABASEDBCFDBPR);

    {Section: SQLCOMMANDS}
    Ini.WriteString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFFXPA, FSQLCOMMANDSSQCFFXPA);
    Ini.WriteString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFDAFO, FSQLCOMMANDSSQCFDAFO);
    Ini.WriteString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFTIFO, FSQLCOMMANDSSQCFTIFO);
    Ini.WriteString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCFDTFO, FSQLCOMMANDSSQCFDTFO);
    Ini.WriteString(csSQLCOMMANDSSection, csSQLCOMMANDSSQCMINME, FSQLCOMMANDSSQCMINME);
  end;
end;

procedure TConfiguracoes.LoadFromFile(const FileName: string);
var
  Ini: TIniFile;
begin
  if FileExists(FileName) then
  begin
    Ini := TIniFile.Create(FileName);
    try
      LoadSettings(Ini);
    finally
      Ini.Free;
    end;
  end;
end;

procedure TConfiguracoes.SaveToFile(const FileName: string);
var
  Ini: TIniFile;
begin
  Ini := TIniFile.Create(FileName);
  try
    SaveSettings(Ini);
  finally
    Ini.Free;
  end;
end;

initialization
  Configuracoes := TConfiguracoes.Create;

finalization
  Configuracoes.Free;

end.
